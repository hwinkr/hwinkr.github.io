{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"배경 모모 서비스를 만들면서 구현하고 사용중이었던 캘린더 UI를 UT(Usability Test)가 끝난 후, 같이 학습을 하는 크루들에게 피드백을 받은 후 개선하면서 했던 고민들과 해결 과정들을 기록한다...! 기존 캘린더 UI  기존 캘린더 UI에서 개선했으면 하는 사항들 모바일에서 선택된 날짜가 계란처럼 보이는 문제 해결  모모 서비스에서 약속을 만…","fields":{"slug":"improvement-calendar-ui"},"frontmatter":{"date":"August 14, 2024","title":"[TIL] 캘린더 UI를 개선하면서...이런 저런 고민들과 해결 과정","tags":["TIL","우아한테크코스"]},"rawMarkdownBody":"\n## 배경\n\n모모 서비스를 만들면서 구현하고 사용중이었던 캘린더 UI를 UT(Usability Test)가 끝난 후, 같이 학습을 하는 크루들에게 피드백을 받은 후 개선하면서 했던 고민들과 해결 과정들을 기록한다...!\n\n## 기존 캘린더 UI\n\n![](./assets/prev-calendar.png)\n\n## 기존 캘린더 UI에서 개선했으면 하는 사항들\n\n- 모바일에서 선택된 날짜가 계란처럼 보이는 문제 해결\n\n![](./assets/egg-calendar.png)\n\n모모 서비스에서 약속을 만드는데 사용되는 캘린더 컴포넌트를 모바일에서 사용할 때 약간의 문제가 생겼다. 모바일 환경에서 특정 날짜를 강조하는 UI가 계란 형태로 보여지는 문제였다. 개발자 도구의 Element 탭에서 이유를 분석해보니, 스타일 속성에 기본적으로 padding이 6으로 설정되어 있는 것을 확인할 수 있었다. `<button />` 태그는 기본적으로 padding : 6 스타일 속성을 가지는 것인지, 아니면 내가 인지하지 못하는 곳에서 스타일 속성을 설정한 것인지 궁금해서, 완전 기본 `<button />` 태그를 만들어봤다.\n\n![](./assets/text-button.png)\n\n![](./assets/f12-button.png)\n\n아무런 스타일을 설정하지 않아도 기본적으로 padding : 6 스타일이 적용된 것을 확인할 수 있었다. 이제 이 스타일 속성을 제거하자 :)\n\n![](./assets/egg-resolve-calendar.png)\n\n개발자라면, 브라우저의 개발자 도구를 활용해서 문제를 빠르게 해결하자! 때로는 AI에게 물어보는 것 보다 개발자 도구를 열어서 빠르게 확인하는 것이 좋은 것 같다고 느꼈다.\n\n- 가장 왼쪽에 일요일이 오도록 변경 + 일요일 색 수정\n\n새벽 4시까지 디자인을 했었던 날에 이유는 확실하게 기억이 나지는 않지만, 월요일이 가장 왼쪽에 오도록 달력 디자인이 설계됐었다. 이 후 다른 크루들에게 피드백을 몇 번 받았었는데 다른 서비스의 달력은 모두 일요일이 가장 왼쪽에 있으니, 모모 달력도 이에 맞춰 변경했으면 좋겠다는 피드백들을 받았다. 월요일이 가장 왼쪽에 있어야 하는 확실한 이유도 없었기에, 수용할 만한 피드백이라고 생각해서 개선하기로 했다!\n\n```tsx\nexport function getYearMonthInfo(year: number, month: number) {\n  const startDate = new Date(year, month - 1, 1)\n\n  /* \n   로직 설명(@hwinkr)\n   - 월요일을 index 0으로 변경하기 위해서 나머지 연산자를 활용한다.\n   - 자바스크립트 Date 객체는 기본적으로 일요일이 인덱스가 0인데, 모모 달력은 월요일을 인덱스를 0으로 만들어줘야 한다.\n   - 따라서, 특정 달의 시작 날짜에 대한 인덱스에 6을 더해주고 7로 나눈 나머지를 사용하는 것으로 구현했다.\n  */\n  const firstDayIndex = (startDate.getDay() + 6) % 7\n\n  const lastDayOfMonthDate = new Date(year, month, 0)\n  const lastDayNumber = lastDayOfMonthDate.getDate()\n\n  const daySlotCount = firstDayIndex + lastDayNumber\n\n  return { year, month, firstDayIndex, daySlotCount } as const\n}\n```\n\n일요일이 가장 첫 번째 요일 즉, 인덱스가 0이기 때문에 월요일을 가장 왼쪽에 배치하기 위해서는 월요일의 인덱스를 0으로 만들어줘야 했다. 이를 위해서 나머지 연산자를 사용했다.\n\n```tsx\nconst firstDayIndex = (startDate.getDay() + 6) % 7\n```\n\n월요일은 인덱스가 1이기 때문에 `(1 + 6) % 7 = 0` 이 되고, 월요일 인덱스를 0으로 변경해줄 수 있었다.\n\n하지만, 피드백을 반영하면서 다시 일요일 인덱스를 0으로 만들어줘야 했기에 해당 로직은 제거하게 되었다.\n\n```tsx\nexport const generateMonthDaySlots = (year: number, month: number) => {\n  const startDate = new Date(year, month - 1, 1)\n  const firstDayIndex = startDate.getDay()\n\n  const lastDateOfMonth = new Date(year, month, 0)\n  const lastDayNumber = lastDateOfMonth.getDate()\n\n  const daySlotCount = firstDayIndex + lastDayNumber\n\n  return { firstDayIndex, daySlotCount } as const\n}\n```\n\n- 토요일에 색 추가 +) 요일을 보여주는 텍스트 크기 변경\n\n위 캘린더를 보여주니, 일요일에 빨간색을 표시해주는 것은 좋지만 토요일에도 파란색 표시가 있으면 사용자가 더 쉽게 달력 UI를 이용할 수 있을 것 같다는 피드백도 받았다. 이를 수용해서 알맞은 색을 찾았고, 달력에서 활용하기로 했다. `#8c9eff`\n\n![](./assets/dayOfWeek-calendar.png)\n\n추가로, 요일을 보여주는 텍스트의 크기가 실제로 휴대폰에서 확인해보니 너무 작은 것 같아서 1.6rem(1.6px)로 변경했다.\n\n- 일요일 색 변경\n\n기능 구현에 집중하느라, 디자인에 신경 쓰지 못해서 일요일의 색을 `red` 로 했었다. 모모 서비스의 MVP가 완성되고 달력을 다시 보니 일요일의 색을 변경해야 할 필요성을 느꼈다. 그래서, col.or앱을 참고해서 모모의 분홍색에 그나마 어울리는 빨간색을 찾아서 변경했다. `#fa665b`\n\n- 오늘 이전은 선택할 수 없도록 disabled 처리 +) 오늘 날짜에 색 추가\n\n과거 날짜에 대한 약속은 잡지 않기 때문에, 사용자에게 과거 날짜는 선택할 수 없음을 UI로 표시해줘야 했다. 다른 캘린더 UI를 참고하면서 `<button />`이 disabled 상태일 때 보여주는 UI와 비슷하게 표시하면 사용자에게 지난 날짜는 선택할 수 없다는 것을 알려줄 수 있을 것 같았다.\n\n![](./assets/egg-resolve-calendar.png)\n\n확실히 사용자에게 선택할 수 없는 날짜임을 암묵적으로 알려줄 수 있을 것 같았다.\n\n여기까지 작업을 하고, 한 가지 고민을 추가로 하게 되었다. 선택할 수 없는 요소 즉, clickable 하지 않은 요소인데 `<button />` 태그를 사용하는 것이 맞는지에 대한 고민이었다.\n\n```tsx\nreturn isValidDate ? (\n  <button\n    key={fullDate}\n    onClick={() => onDateClick(fullDate)}\n    disabled={isPrevDate}\n    css={[s_baseDaySlot, s_daySlotButton]}\n  >\n    <span\n      css={[\n        s_baseDaySlotText,\n        s_daySlotText({\n          isSelectedFullDate,\n          isPrevDate,\n          isHoliday,\n          isSaturday,\n          isToday,\n        }),\n      ]}\n    >\n      {date}\n    </span>\n  </button>\n) : (\n  <div key={fullDate} css={s_baseDaySlot}></div>\n)\n```\n\n실제로 달력 UI를 구현하는 코드에서는 유효한 날짜가 아니면\n\n![](./assets/div-cell-calendar.png)\n\n즉, 날짜로 표시할 필요가 없고 빈칸으로 보여줘야할 경우에 `<button />`이 아닌 <div /> 태그를 사용해서 보여주기 때문에 이미 지난 날짜에 대해서도 <div />를 사용해서 보여줘야할지에 대한 고민이었다. 웹 접근성을 고려했을 때, 클릭할 수 있는 요소에 대해서만 `<button />` 태그를 사용하는 것이 좋다는 것을 알고 있으므로 이미 지난 날짜는 선택할 수가 없는데(클릭할 수가 없는데) `<button />` 태그를 사용해도 되는지에 대한 의문이 생겼다. 이에 대한 고민을 낙타에게 이야기를 했고, 과거에는 선택할 수 있는 날짜였지만 시간이 지나서 선택할 수 없게된 것 뿐이고, 사용자에게 표시를 해줘야 하는 유효한 날짜이기 때문에 `<button />` 태그를 사용하는 것이 좋을 것 같고 추가로, disabled 처리를 하면 될 것 같다는 결론을 지었다. 다른 서비스는 어떻게 하고 있나 궁금해서 네이버를 방문해서 알아보았다.\n\n![](./assets/naver-calendar.png)\n\n네이버도 이미 지난 날짜에 대해서도 `<button />` 태그를 사용하고 disabled를 활용하고 있는 것을 확인할 수 있었다.\n\n오늘 날짜를 표시하는 경우에는 모모 서비스의 primary color인 분홍색의 보색인 녹색 계열의 색을 활용했다. 기존에는 선택된 날짜들의 스타일과 비슷하게 동그란 원을 추가로 그려줬다.\n\n![](./assets/egg-resolve-calendar.png)\n\n해당 디자인을 적용하고 나서, 오늘 날짜를 잘 강조한 것 같아서 괜찮다 싶었다. 하지만, 약속 후보 날짜들을 선택하고 나니 생각이 달라졌다.\n\n![](./assets/today-selected-calendar.png)\n\n동그란 원을 활용한다는 점이 비슷해서, 오늘 날짜와 선택된 날짜들을 강조하는 것이 헷갈릴 수 있겠다는 생각을 했다. 모모 팀원들과 다른 팀 사람들을 찾아가서 물어보니 나와 생각이 비슷했다. 이를 해결하기 위해서 다른 서비스들의 달력은 어떻게 오늘 날짜를 강조하고 있는지 찾아보았다. 그 중 동그란 원을 활용하지 않고 오늘 날짜 밑에 작은 점을 두는 UI를 찾게되었고, 이 UI를 활용하면 선택된 날짜들을 강조하는 스타일과 달라지니 헷갈릴 수 있는 문제를 해결할 수 있을 것이라 판단해 적용해보았다.\n\n![](./assets//div-cell-calendar.png)\n\n적용한 뒤, 다시 다른 팀원들을 찾아가서 물어보니 날짜 뒤, 동그란 원을 두는 것 보다 날짜 아래에 작은 점을 두는 것이 스타일이 구분되어 헷갈리지 않을 것이라는 피드백을 받게 되었다. :)\n\n정말 작은 디자인 요소이지만, 헷갈림을 줄 수도 있을 것 같은 부분을 개선하는 과정을 통해서 사용자 친화적인 디자인을 하는 것이 얼마나 중요한 것인지를 한 번더 깨닫게 되었다!\n\n## 기타 배운점들\n\n1. 자바스크립트 객체를 활용해서 특정 달의 마지막 날짜를 구하기\n\n```tsx\nconst lastDayOfMonth = new Date(2024, 8, 1)\n```\n\n자바스크립트에서 월은 인덱스가 0부터 시작하기 때문에, 위 처럼 코드를 입력하면 숫자 8은 실제로 9를 가르키게 된다.\n\n```tsx\n\"9/1/2024, 12:00:00 AM\"\n```\n\n자바스크립트 Date 객체에서 세 번째 인자는 특정 달의 n번째 날짜를 가르키게 되어 1로 호출하게 되면 9월 1일을 가르키게된다. 여기서 0으로 변경하면 9월 1일의 전 날인 8월 31일을 반환하게 된다. 그래서 특정 달의 마지막 날짜를 구하기 위해서는 세 번째 인자를 0으로 변경해서 호출하는 방법을 활용할 수 있다.\n\n```tsx\nconst lastDayOfMonth = new Date(2024, 8, 0);\n\nconsole.log(lastDayOfMonth.toLocaleString())\n\n-> // '8/31/2024, 12:00:00 AM\n```\n\n1. Day, Date 컨벤션 맞추기\n\n![](./assets/date-day.png)\n\n코드리뷰를 해주는 팀원이 day, date의 단어를 혼용해서 사용하고 있는 것 같다는 피드백을 줬다. day를 요일로써도 사용하고 있고, 날짜(숫자)로써도 사용하고 있는 것 같아 코드 리뷰를 하기 어렵다는 피드백이었다. day, date 도메인 용어에 대한 의미를 정하고 가면 좋을 것 같아서 정리를 한 후 팀원들에게 공유했다.\n\n![alt text](./assets/share-date-day.png)\n\n- date\n  - 오늘 날짜를 의미합니다.\n  - 2024-08-15이면, 15를 의미합니다.\n- day\n  - 요일을 의미합니다. (목)\n- fullDate\n  - 2024-08-15와 같은 전체 날짜를 의미합니다.\n  - 사용자가 약속 후보 날짜들을 담을 때, fullDate를 사용합니다.\n\n코드 리뷰를 할 때에도 모든 팀원이 도메인 용어에 대해 전제가 깔려있으면 리뷰를 하기 편하겠구나,,,하는 생각이 들었다. PR description을 더 상세하게, 잘 작성해야겠다고 느꼈다.\n\n## 남은 개선 사항들\n\n- [ ] 일요일 뿐만 아니라, 실제 공휴일도 표시하기\n- [ ] 드래그로 날짜들을 선택할 수 있도록 하기\n\n![](./assets/momo-feedback.png)\n\n기간이 긴 약속을 잡아야할 때는, 날짜를 일일이 하나씩 누르기 힘드므로 드래그를 활용해서 날짜를 선택할 수 있으면 좋을 것 같다는 피드백을 받았다. 이 피드백 반영은 `to be continued…`로 남겨둔다\n"},{"excerpt":"모모 프론트엔드 배포 자동화 도전! 6주 동안 모모 서비스 개발을 진행하면서, 프론트엔드 작업이 배포가 되어야 하는 상황에 매번 aws에 로그인을 하고, s3 버킷에 새로운 리소스들을 업로드하고, cloudfront의 캐싱을 무효화 하는 작업을 수동으로 했었다. 더이상 이럴 수 없다는 생각이 들어 페드로와 함께 프론트엔드 배포 자동화를 진행했다. 아래는 …","fields":{"slug":"til-frontend-deploy"},"frontmatter":{"date":"August 12, 2024","title":"[TIL] aws s3, cloudfront 배포 자동화 해보기","tags":["TIL","우아한테크코스"]},"rawMarkdownBody":"\n## 모모 프론트엔드 배포 자동화 도전!\n\n6주 동안 모모 서비스 개발을 진행하면서, 프론트엔드 작업이 배포가 되어야 하는 상황에 매번 aws에 로그인을 하고, s3 버킷에 새로운 리소스들을 업로드하고, cloudfront의 캐싱을 무효화 하는 작업을 수동으로 했었다. 더이상 이럴 수 없다는 생각이 들어 페드로와 함께 프론트엔드 배포 자동화를 진행했다. 아래는 배포를 자동화하기 위한 yml 파일을 설정하면서 배운 내용들이다!\n\n### 프론트엔드 배포 yml 파일에서 사용되는 키워드\n\n- github actions\n- self-hosted\n- aws s3, cloudfront\n\n### on\n\ndevelop 브랜치에서 시작해서\n\n- 새로운 기능(feature)를 구현하고,\n- develop 브랜치로 PR(Pull Request)를 생성하고,\n- 코드 리뷰를 주고 받다가 develop 브랜치로 머지가 될 때 Frontend CD workflow를 실행한다.\n\n깃허브 이벤트에는 merge가 존재하지 않으므로, develop 브랜치에 push가 되었을 때 워크 플로우를 실행한다.\n\n```shell\nname: Frontend CD\n\non:\n  push:\n    branches: [\"develop\"]\n\npermissions:\n  checks: write\n```\n\n## jobs\n\n### 1) detect-changes\n\n```shell\ndetect-changes:\n  runs-on: ubuntu-latest\n  permissions:\n    pull-requests: read\n  outputs:\n    backend: ${{ steps.filter.outputs.backend }}\n    frontend: ${{ steps.filter.outputs.frontend }}\n  steps:\n    - uses: actions/checkout@v4 # Push 이벤트이기 때문에 checkout 해야 함\n      with:\n        ref: develop\n    - uses: dorny/paths-filter@v3\n      id: filter\n      with:\n        base: \"develop\" # 해당 브랜치의 last commit과 변경점 비교\n        filters: |\n          backend:\n            - 'backend/**'\n          frontend:\n            - 'frontend/**'\n```\n\n백엔드의 PR이 머지되어 develop 브랜치에 push 이벤트가 발생할 경우에는 프론트엔드 CD 워크플로우가 실행될 필요가 없기 때문에, `detect-changes` job을 활용한다. `detect-change`는 `develop` 브랜치의 last commit과 PR에서의 backend, frontend 폴더 내부의 commit들과 비교해서 비교 결과를 outputs의 frontend, backend에 각각 담는 작업을 수행하는 job이다.\n\n### 2) fe-build\n\n```shell\nfe-build:\n  needs: detect-changes # jobs들은 병렬로 실행됨, needs 키워드를 사용해서 특정 job이 완료(성공)면 실행하도록 설정\n  if: ${{ needs.detect-changes.outputs.frontend == 'true' }}\n  runs-on: ubuntu-latest\n  defaults:\n    run:\n      shell: bash\n      working-directory: ./frontend\n\n  steps:\n  - name: 모모 레파지토리의 코드를 가져와요 :)\n    uses: actions/checkout@v4\n\n  - name: 노드 버젼을 설정해요 :)\n    uses: actions/setup-node@v4\n    with:\n      node-version: \"lts/*\"\n\n  - name: 이전 의존성을 저장해둔게 있나~? 확인해요 :)\n    id: cache\n    uses: actions/cache@v4\n    with:\n      path: \"frontend/node_modules\"\n      key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n      restore-keys: |\n        ${{ runner.os }}-node-\n        ${{ runner.os }}\n\n  - name: package-lock.json을 활용해서 의존성을 깨끗하게 설치해요 :)\n    if: steps.cache.outputs.cache-hit != 'true'\n    run: npm ci\n\n  - name: .env 파일을 생성해요 :)\n    run: |\n      echo \"${{ secrets.MOMO_FE_ENV }}\" >> .env\n\n  - name: 프론트엔드 리소스를 빌드해요 :)\n    run: npm run build\n\n  - name: 프론트엔드 리소스 결과물을 깃허브 레파지토리 artifacts로 업로드해요\n    uses: actions/upload-artifact@v4\n    with:\n      name: momoResources\n      path: frontend/dist\n```\n\n**1) needs**\n\n**깃허브 워크플로우에서 각 job들은 병렬로(동시에) 실행**되기 때문에, 만약 A job이 B job의 결과에 영향을 받는다면 A job에서 `needs`를 활용해서 B job이 끝나기를 기다려야 한다는 것을 명시한다. fe-build는 detect-change의 결과에 따라서 실행을 할지 말지 결정되기 때문에 needs에 detect-change를 추가한다. detect-change job의 결과물에서 frontend에 변경사항이 있으면, 프론트엔드 리소스들을 빌드하기 위한 job을 수행한다.\n\n**2) working-directory: ./frontend**\n\nworkding-directory가 ./frontend라는 것은 워크플로우를 실행하는 깃허브 서버에서 `cd frontend` 명령어를 입력하는 것과 같다. npm ci, npm run build와 같은 명령어를 실행하려면 frontend 경로 내부에서 실행해야 하기 때문에 ./frontend경로로 이동해서 작업들을 수행할 것을 명시한다.\n\n**3) actions/checkout@v4**\n\ncheckout은 깃허브 서버에 모모 레파지토리 코드를 가져오는 역할을 한다. 즉, 깃허브 서버에 git clone 명령어를 입력하는 것과 같다. checkout을 하면 워크플로우를 실행하는 깃허브 서버의 한 디렉터리에 모모 레파지토리 코드들이 다운로드된다. 100% 확실하지는 않은 경로지만 대략적으로 아래와 같이 디렉터리들이 만들어진다.\n\n- `/home/runner/work/2024-momo/frontend-cd/frontend`\n- `/home/runner/work/2024-momo/frontend-cd/backend`\n\n**4) upload-artifact**\n\nworking-directory가 ./frontend이기 때문에 모모 레파지토리에 있는 frontend 디렉터리로 이동해서, 의존성(package.json)들을 설치하고, env 파일을 설정하고 npm run build를 실행한다. 빌드까지 완료되면 위에서 언급한 대략적인 디렉터리에 즉, `/home/runner/work/2024-momo/frontend-cd/frontend/dist` 해당 디렉터리에 빌드 결과물들이 생긴다. 이제 `artifacts`에 `frontend/dist` 경로에 있는 결과물을 임시저장한다. 깃허브 `artifacts`는 워크플로우 실행 중에 생성된 파일이나 결과물을 임시로 저장하고, 다른 워크플로우 단계에서 다운로드해서 사용할 수 있는 임시 저장소 역할을 한다.\n\n### 3) deploy\n\n```shell\ndeploy:\n  needs: fe-build\n  runs-on: self-hosted\n  env:\n    CLOUD_FRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}}\n  steps:\n    - name: 모모 깃허브 레파지토리 artifacts로 부터 빌드 결과물을 다운받아요 :)\n      uses: actions/download-artifact@v4\n      with:\n        name: momoResources\n        path: ./frontend/dist\n    - name: aws에 배포하고 cloudfront 캐싱을 무효화해요\n      working-directory: ./frontend/dist/\n      run: |\n        aws s3 sync ./ s3://techcourse-project-2024/momo --delete\n        aws cloudfront create-invalidation --distribution-id \"$CLOUD_FRONT_DISTRIBUTION_ID\" --paths \"/*\"\n```\n\n**1) self-hosted**\n\n깃허브 서버(ubunt-lastes)를 사용하는 것이 아니라, self-hosted를 사용하는 이유는 깃허브 서버에서 우아한테크코스 aws에 접근할 수 있는 방법이 없기 때문이다. IAM 키를 발급받을 수 없는 환경이기 때문에, 우아한테크코스 aws에서 생성한 EC2 인스턴스에서 deploy job을 실행해야 한다.\n\n`aws s3 sync`, `aws cloudfront …` 와 같은 aws 명령어를 실행하기 위해서는 EC2 인스턴스에 `aws cli`가 설치되어 있어야 한다.\n\n**2) download-artifact**\n\n깃허브 artifacts에 저장한 momoResource를 EC2 인스턴스의 ./frontend/dist 경로에 다운로드 받는다. 깃허브 artifacts는 upload 할 때, 사용했던 name기준으로 찾는다.\n\n> **\\*Downloading files**: You can only download artifacts that were uploaded during the same workflow run. When you download a file, you can reference it by name.\n> 파일 다운로드: 동일한 워크플로 실행 중에 업로드된 아티팩트만 다운로드할 수 있습니다. 파일을 다운로드할 때 이름으로 파일을 참조할 수 있습니다.\\*\n\n[참고](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/storing-workflow-data-as-artifacts#about-workflow-artifacts)\n\n**3) aws s3 sync**\n\naws s3 sync는 자동으로 변경을 감지하여 변경 사항이 있는 파일들만 s3 버킷과 동기화 한다. 즉, 현재 s3 버킷에 저장되어 있는 리소스들과, 새롭게 빌드된 리소스들을 비교를 해서 변경 사항이 있는 파일들만 동기화 하는 작업을 수행한다.\n\n**4) aws cloudfront create-invalidation**\n\ncloudfront의 역할 중에는 s3 버킷에 저장된 리소스들을 캐싱하는 역할도 있다. 만약 s3 버킷에는 새로운 리소스들이 업로드 되어 있지만, cloudfront는 여전히 예전 리소스들을 캐싱하고 있다면 새로운 버젼이 릴리즈되었음에도 불구하고 사용자에게 이전 버젼의 서비스를 제공할 수도 있는 문제가 발생한다. 이 문제가 발생하지 않도록 하기 위해서 create-invalidation 명령어를 통해서 cloudfront의 캐싱을 무효화한다. 리액트 쿼리의 `queryClient.invalidateQueries` 와 비슷하다.\n\n아래는 전체 yml 파일 구성이다.\n\n```shell\nname: 모모 프론트엔드 배포 자동화 워크플로우\n\non:\n  push:\n    branches: [\"develop\"]\n\npermissions:\n  checks: write\n\njobs:\n  detect-changes:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: read\n    outputs:\n      backend: ${{ steps.filter.outputs.backend }}\n      frontend: ${{ steps.filter.outputs.frontend }}\n    steps:\n      - uses: actions/checkout@v4 # Push 이벤트이기 때문에 checkout 해야 함\n        with:\n          ref: develop\n      - uses: dorny/paths-filter@v3\n        id: filter\n        with:\n          base: \"develop\" # 해당 브랜치의 last commit과 변경점 비교\n          filters: |\n            backend:\n              - 'backend/**'\n            frontend:\n              - 'frontend/**'\n\n  fe-build:\n    needs: detect-changes # jobs들은 병렬로 실행됨, needs 키워드를 사용해서 특정 job이 완료(성공)면 실행하도록 설정\n    if: ${{ needs.detect-changes.outputs.frontend == 'true' }}\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n        working-directory: ./frontend\n\n    steps:\n      - name: 모모 레파지토리의 코드를 가져와요 :)\n        uses: actions/checkout@v4\n\n      - name: 노드 버젼을 설정해요 :)\n        uses: actions/setup-node@v4\n        with:\n          node-version: \"lts/*\"\n\n      - name: 이전 의존성을 저장해둔게 있나~? 확인해요 :)\n        id: cache\n        uses: actions/cache@v4\n        with:\n          path: \"frontend/node_modules\"\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n            ${{ runner.os }}\n\n      - name: package-lock.json을 활용해서 의존성을 깨끗하게 설치해요 :)\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: .env 파일을 생성해요 :)\n        run: |\n          echo \"${{ secrets.MOMO_FE_ENV }}\" >> .env\n\n      - name: 프론트엔드 리소스를 빌드해요 :)\n        run: npm run build\n\n      - name: 프론트엔드 리소스 결과물을 깃허브 레파지토리 artifacts로 업로드해요\n        uses: actions/upload-artifact@v4\n        with:\n          name: momoResources\n          path: frontend/dist\n\n  deploy:\n    needs: fe-build\n    runs-on: self-hosted\n    env:\n      CLOUD_FRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID}}\n    steps:\n      - name: 모모 깃허브 레파지토리 artifacts로 부터 빌드 결과물을 다운받아요 :)\n        uses: actions/download-artifact@v4\n        with:\n          name: momoResources\n          path: ./frontend/dist\n      - name: aws에 배포하고 cloudfront 캐싱을 무효화해요\n        working-directory: ./frontend/dist/\n        run: |\n          aws s3 sync ./ s3://techcourse-project-2024/momo --delete\n          aws cloudfront create-invalidation --distribution-id \"$CLOUD_FRONT_DISTRIBUTION_ID\" --paths \"/*\"\n```\n\n## 느낀점\n\n이전에 `aws amplify`를 사용해서 배포를 했었을 때는, aws에서 알려주는대로 버튼만 클릭하면 알아서 모든 것을 해줬다. 심지어 yml 파일을 만들 필요도 없었다. 하지만 이번에 배포 자동화를 위한 yml 파일을 직접 만들면서 초반에는 이해하기 힘들었지만, 각 job들을 수행하기 위한 명령어들을 평소에 내가 자주 사용하는 명령어로 비유해서 이해를 시도하니 쉽게 이해할 수 있었다. (cd frontend, git clone과 같은…)\n\n이제 merge 버튼만 클릭하면 프론트엔드 배포가 알아서 된다니… 너무 편하게 개발할 수 있을 것 같다!\n\n- PR 링크 : https://github.com/woowacourse-teams/2024-momo/pull/212\n"},{"excerpt":"학습 배경 모모 서비스 로그인 방식이 변경되면서 CORS에 대해서 이해해야 할 필요성이 생겼다.\n기존 로그인 방식은 다음과 같았다. 약속에 참여하고자 하는 사용자가 처음 로그인을 하면 응답 바디에 토큰을 넣어서 전달 토큰을 쿠키에 저장  라이브러리를 활용해서 쿠키에 저장된 토큰을 사용 위 코드에서도 확인할 수 있듯, 쿠키에 저장된 사용자의 토큰을 자바스크…","fields":{"slug":"til-cors"},"frontmatter":{"date":"August 06, 2024","title":"[TIL] CORS에 대해 간단하게 알아보자","tags":["TIL","우아한테크코스"]},"rawMarkdownBody":"\n## 학습 배경\n\n모모 서비스 로그인 방식이 변경되면서 CORS에 대해서 이해해야 할 필요성이 생겼다.\n기존 로그인 방식은 다음과 같았다.\n\n1. 약속에 참여하고자 하는 사용자가 처음 로그인을 하면 응답 바디에 토큰을 넣어서 전달\n2. 토큰을 쿠키에 저장\n3. `react-cookie` 라이브러리를 활용해서 쿠키에 저장된 토큰을 사용\n\n```jsx\nexport default function getHeaders(): HeadersInit {\n  const headers = { \"Content-type\": \"application/json\" }\n  const token = getCookie(COOKIE_KEYS.token)\n\n  if (token) {\n    return { ...headers, Authorization: `Bearer ${token}` }\n  }\n\n  return headers\n}\n```\n\n위 코드에서도 확인할 수 있듯, **쿠키에 저장된 사용자의 토큰을 자바스크립트로 접근해서 요청 헤더에 담아서 보냈었다.** 하지만, 해당 로그인 방식을 사용하다가 로그인과 관련된 보안을 강화하게 되면서 로그인 방식도 자연스럽게 변경되었다. 아래는 강화된 보안 내용을 간단하게 정리한 것이다.\n\n### HttpOnly\n\nhttpOnly는 이름에서 확인할 수 있듯 **쿠키를 오직 http 프로토콜을 사용한 통신에서만 접근할 수 있도록 하는 설정**이며, 쿠키 자체에 설정한다. httpOnly를 설정하지 않으면 `react-cookie`나 `document.cookie`등 자바스크립트로 쿠키에 접근을 할 수 있기에 xss 공격에 취약해진다는 단점이 있다.\n\n![](./assets/momo-set-cookie.png)\n\n그래서 서버측에서 응답 헤더에 HttpOnly 설정을 하고 자바스크립트로는 쿠키에 접근할 수 없도록 했다.\n\n### sameSite\n\n이제, 자바스크립트로는 쿠키에 접근할 수 없기 때문에 서버에 인증/인가가 필요한 요청을 할 때 브라우저의 쿠키를 직접 서버에 전달해주는 것으로 변경되었다.\n\n```tsx\nconst createFetchClient = (baseUrl: string) => {\n  return async <T>({ path, method, body, isAuthRequire }: FetchOption): Promise<T> => {\n\t\t//...\n    const response = await fetch(url, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: body ? JSON.stringify(body) : null,\n      credentials: isAuthRequire ? 'include' : 'omit',\n    });\n\t  //...\n};\n```\n\nfetch 함수를 호출할 때, `credentials : ‘include’` 설정을 해주면 요청 시 브라우저의 쿠키를 함께 전달해줄 수 있다. 하지만, 클라이언트와 서버가 쿠키를 주고 받음으로써 통신할 때 CSRF 공격을 받을 수 있는 문제가 있다고 한다.\n\n[ProtSwagger](https://portswigger.net/web-security/csrf)에서는 CSRF에 대해서 다음과 같이 설명한다.\n\n> _Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other._\n>\n> _크로스 사이트 요청 위조(CSRF라고도 함)는 공격자가 사용자가 의도하지 않은 작업을 수행하도록 유도할 수 있는 웹 보안 취약점입니다. 이를 통해 공격자는 서로 다른 웹사이트가 서로 간섭하지 못하도록 설계된 동일한 출처 정책을 부분적으로 우회할 수 있습니다._\n\n정리하자면, 웹 사이트 사용자 자신의 의지와는 무관한 행동을 하도록 유도하는 공격을 말한다.\n\n![](./assets/csrf.png)\n\n해커가 스크립트가 심어진 페이지를 사용자에게 방문하도록 유도한 후, 방문하면 비밀번호 변경이나 송금을 요청한다. 이 때, 사용자 브라우저의 쿠키에는 로그인을 한 후 받은 토큰이 저장되어 있기 때문에 서버는 사용자의 요청이라고 간주하고 해당 요청을 실행한다. **이로써 해커가 의도한 행동을 마치 사용자가 한 것 처럼 꾸미는 공격이 가능**해진다.\n\n해당 공격이 가능한 이유는 도메인이 다른 클라이언트라도 서버에 특정 요청을 할 때, 쿠키를 보내는 것이 가능하기 때문이다.\n\n```html\n<form action=\"https://www.example.com/change-password\" method=\"POST\">\n  <input type=\"hidden\" name=\"new-password\" value=\"newpassword123\" />\n</form>\n<script>\n  document.forms[0].submit()\n</script>\n```\n\n위 악성 코드가 심어진 공격자의 도메인에 방문한 사용자는 쿠키와 함께 서버에 요청을 보내게 되어 비밀번호가 공격자의 의도대로 변경된다.\n\n이 문제를 해결하기 위해서 same-site 설정이 등장했고, 모모도 적용해 보기로 했다. 서버에서 설정할 수 있는 same-site 옵션은 다음과 같다.\n\n1. **None**: 브라우저가 **모든 출처**에 쿠키를 전송할 수 있도록 허용. 이 설정은 `SameSite` 속성이 없는 것과 같습다. 단, `None`을 사용할 때는 쿠키에 `Secure` 속성을 반드시 포함해야 하며, 그렇지 않으면 대부분의 브라우저에서 쿠키가 차단된다.\n2. **Lax**: 일부 안전한 요청(GET, HEAD 등)에 대해서만 쿠키를 보낸다. 즉, **안전한 요청**에서 쿠키가 전송되며, 사용자 상호작용이 발생한 링크 클릭 또는 폼 제출과 같은 경우에만 `SameSite`가 적용된다. 단, `POST` 요청 등 **안전하지 않은** 메서드에서는 쿠키가 전송되지 않는다.\n3. **Strict**: **동일한 사이트 내에서 발생하는 요청**에 대해서만 쿠키를 전송하도록 한다. **Cross-site** 요청에는 쿠키를 전송하지 않는다. Cross-site의 정의는 기본 도메인(eTLD+1) 비교에 기반한다.\n\n![[이미지 출처](https://jfhr.me/what-is-an-etld-+-1/)](./assets/etld.png)\n\n- TLD : 최상위 도메인(top-level-domain), 해당 이미지에서 uk\n- eTLD : 유효 최상위 도메인(effective-top-level-domain), 해당 이미지에서 co.uk\n- eTLD + 1 : **eTLD+1**은 eTLD와 도메인 이름의 다음 부분을 의미. google.co.uk\n\neTLD + 1에 기반한 클라이언트 요청 origin, 응답 origin 비교를 통해서 같을 경우에만 쿠키를 보내도록 한다.\n\n모모 서비스를 예시로 들자면 다음과 같다.\n\n- `https://www.naver.com`\n\n- `https://momonow.kr`, `https://api.momonow.kr`은 둘 다 eTLD + 1이 momonow.kr 이므로 same-site라고 판단되어 요청에 쿠키를 함께 전달한다.\n- 반면 `http://뭐시기저시기.kr`, `https://api.momonow.kr`은 eTLD + 1 비교에 의해서 cross-site라고 판단되어 요청에 쿠키를 함께 전달하지 않는다.\n\n여기까지 정리하면서 추가적인 궁금증이 생겼다.\n\n🤔 도메인이 다르다는 것이 어떤 의미인지?  \n🤔 쿠키를 주고 받으면서 요청/응답을 할 때, 클라이언트 영역이 더 알면 좋은 지식이 있는지?\n\n해당 궁금증들을 해결하기 위해서 CORS 개념에 대해서 간단하게 학습해 보는 시간을 가졌다.\n\n## 브라우저는 기본적으로 SOP\n\n브라우저는 기본적으로 SOP 정책을 사용한다고 한다. MDN에서는 SOP에 대해서 다음과 같이 설명한다.\n\n> _The same-origin policy is a critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin._\n>\n> _It helps isolate potentially malicious documents, reducing possible attack vectors. For example, it prevents a malicious website on the Internet from running JS in a browser to read data from a third-party webmail service (which the user is signed into) or a company intranet (which is protected from direct access by the attacker by not having a public IP address) and relaying that data to the attacker._\n>\n> _동일 출처 정책은 한 출처에서 로드된 문서 또는 스크립트가 **다른 출처의 리소스**와 상호 작용하는 방식을 제한하는 중요한 보안 메커니즘입니다._\n>\n> _잠재적으로 악의적인 문서를 격리하여 가능한 공격 경로를 줄이는 데 도움이 됩니다. 예를 들어, 인터넷의 악성 웹사이트가 브라우저에서 JS를 실행하여 사용자가 로그인한 타사 웹메일 서비스 또는 회사 인트라넷(공용 IP 주소가 없어 공격자가 직접 액세스할 수 없도록 보호됨)에서 데이터를 읽고 해당 데이터를 공격자에게 전달하는 것을 방지할 수 있습니다._\n\n해당 내용을 정리해 보자면, 보안상의 이유로 브라우저가 사용하는 정책인 SOP는 출처가 다른 요청을 제한한다 즉, 출처가 다른 요청은 잘못된 요청이라고 판단하고 요청을 허가하지 않는 정책이라고 할 수 있다.\n\n그렇다면, 어떤 경우에 출처가 다르다고 판단하는 것일까?\n\n## 출처(origin) 비교하기\n\n출처(origin)이 무엇인지 알아보기 위해서 아래 URL이 있다고 가정해 보고, 해당 URL을 분석해 보자.\n\n```text\nhttps://momonow.kr:8080/meeting/schedules?attendeeName='해리'\n```\n\n- scheme(protocol) : http 또는 https\n- host : hostname과 port를 합친 것을 말한다.\n  - hostname : momonow.kr\n  - port : 8080\n- pathname : /meeting/schedules\n- search : attendeeName=’해리’\n\n여기서 출처(origin)는 scheme와 host(hostname + port)를 합친 것을 말하며, **구성 중 하나라도 다르면 cross-origin이라고 판단한다.**\n\n만약 현재 사용자의 웹 사이트 방문 URL 다음과 같다고 가정해 보자.\n\n```text\nhttps://momonow.kr\n```\n\n그렇다면, 다음과 같은 경우에 cross-origin이라고 할 수 있다.\n\n1. http로 요청을 보내는 경우\n2. `http://something.momonow.kr`로 요청을 보내는 경우\n\n→ 해당 요청은 서브 도메인으로 요청을 보내지만 서브 도메인이 다른 경우에도 다른 호스트라고 판단하기 때문에 cross-origin이라고 판단한다.\n\n3. 포트번호 80으로 요청을 보내는 경우 (https 기본 포트 번호는 443)\n\n브라우저는 위 3가지 요청에 대해서 **모두 출처가 다른 요청이라고 판단**하기 때문에 요청을 허가하지 않는다.\n\n## CORS\n\n![](./assets/momo-f12.png)\n\n현재 모모 서비스는 `https://momonow.kr` → `https://api.momonow.kr/api/v1/meetings`로 보내는 요청인 corss-origin 요청인 경우에도 클라이언트 & 서버가 응답/요청을 주고 받을 수 있다. 그 이유는 서버 측에서 `Access-Control-Allow-Origin` 설정에 `https://momonow.kr`을 추가해줬기 때문이다. 해당 설정은 브라우저에게 해당 origin에서 오는 요청은 유효한 요청이라는 것을 알려주기 위한 설정이다. 브라우저는 기본적으로 특정 사이트에 요청을 보내도 되는지 확인할 방법이 없기 때문에 요청을 받아서 처리하는 서버 측에서 직접 정책에 따른 설정을 해줘야 한다. 해당 설정이 CORS 개념을 이용한 것이다.\n\nMDN에서는 CORS에 대해 다음과 같이 설명한다.\n\n> _**Cross-Origin Resource Sharing** ([CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS)) is an [HTTP](https://developer.mozilla.org/en-US/docs/Glossary/HTTP)-header based mechanism that allows a server to indicate any [origins](https://developer.mozilla.org/en-US/docs/Glossary/Origin) (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a \"preflight\" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request._\n>\n> _**교차 출처 리소스 공유**(Cross-Origin Resource Sharing, [CORS](https://developer.mozilla.org/ko/docs/Glossary/CORS))는 브라우저가 자신의 출처가 아닌 다른 어떤 [출처](https://developer.mozilla.org/ko/docs/Glossary/Origin)(도메인, 스킴 혹은 포트)로부터 자원을 로딩하는 것을 허용하도록 서버가 허가 해주는 [HTTP](https://developer.mozilla.org/ko/docs/Glossary/HTTP) 헤더 기반 메커니즘입니다. 또한 CORS 는 교차 출처 리소스를 호스팅하는 서버가 실제 요청을 허가할 것인지 확인하기 위해 브라우저가 보내는 \"사전 요청(프리플라이트, Preflight)\" 메커니즘에 의존합니다. 이 사전 요청에서 브라우저는 실제 요청에서 사용할 HTTP 메서드와 헤더들에 대한 정보가 표시된 헤더에 담아 보냅니다._\n\n정리하자면, CORS는 서버가 자원 공유를 **부분적으로 허용할 출처를 결정하는 정책 및 설정이다.**\n\nCORS를 사용하기 위해서는 서버 측에서 아래 두 설정을 해줘야 한다.\n\n1. ACAO - access control allow origin\n2. ACOM - access control allow method\n\n```java\nregistry.addMapping(\"/api/**\")\n        .allowedOriginPatterns(corsProperties.getAllowOrigins())\n        .allowedMethods(\"GET\", \"POST\", \"HEAD\", \"PATCH\", \"PUT\", \"DELETE\")\n        .allowCredentials(true);\n```\n\n코드로 나타내면 다음과 같고, 클라이언트 측과 쿠키를 주고 받기위해 `allowCredentials` 설정까지 해줬다.\n\n## 느낀 점\n\n글 제목은 간단하게 알아보기였지만, 글을 다 작성하니 전혀 간단하지 않은 것 같다…ㅎ\n\n브라우저는 보안을 위해서 기본적으로 SOP 정책을 사용하지만 동일 서비스에서 클라이언트 & 서버의 도메인이 다를 경우 서버의 자원을 부분적으로 허용하기 위해서 CORS를 사용할 수 있다는 것을 배웠다. 브라우저는 특정 경로에 요청을 보내도 되는 것인지 판단할 수 없기 때문에 CORS 설정으로 알려줘야한다고 정리하니 이해가 정말 잘 됐다.\n\n그리고, xss, CSRF 공격이 실제로 발생한 것을 눈으로 확인해 보지는 않았지만 해당 공격이 발생할 경우 어떻게 대처할 수 있을지를 깊게는 아니지만 어느 정도 배울 수 있었다.\n\n“쿠키를 직접 주고 받는 방식으로 로그인 방법 변경” 이 한 문장을 완성하기 위해서 정말 많은 개념이 필요했다. 위에서 정리한 내용 정도면 프론트엔드 영역을 개발하는 사람으로서 쿠키 기반 로그인에 대해 충분히 이해했다고 볼 수 있을 것 같다(~~아니면 뭐…더 공부해야겠지만~~)\n"},{"excerpt":"배경 모모에서 사용하는 헤더 컴포넌트의  속성을 로 변경했다가 예상치 못한 UI 관련 문제를 겪고, 이를 해결하는 과정에서 fixed, sticky의 차이를 학습하게 되었다. 어떤 차이가 있는지 학습한 내용을 기록해 본다 :) 현재 모모 앱의 글로벌 레이아웃 컴포넌트는 다음과 같다. 헤더 아래에 있는 요소들의 공통 레이아웃 스타일을 정의하는 s_conte…","fields":{"slug":"til-css-position"},"frontmatter":{"date":"August 04, 2024","title":"[TIL] css position fixed, sticky 속성의 차이","tags":["TIL","우아한테크코스"]},"rawMarkdownBody":"\n## 배경\n\n모모에서 사용하는 헤더 컴포넌트의 `position` 속성을 `fixed`로 변경했다가 예상치 못한 UI 관련 문제를 겪고, 이를 해결하는 과정에서 fixed, sticky의 차이를 학습하게 되었다. 어떤 차이가 있는지 학습한 내용을 기록해 본다 :)\n\n현재 모모 앱의 글로벌 레이아웃 컴포넌트는 다음과 같다.\n\n```tsx\nexport default function GlobalLayout() {\n  return (\n    <div css={s_globalContainer}>\n      <Header />\n      <div css={s_content}>\n        <Outlet />\n      </div>\n    </div>\n  )\n}\n```\n\n```tsx\nexport const s_content = css`\n  overflow-y: scroll;\n  height: calc(100vh - 8.4rem); // 8.4rem : 헤더의 높이\n  padding: 0 1.6rem;\n`\n```\n\n헤더 아래에 있는 요소들의 공통 레이아웃 스타일을 정의하는 s_content 스타일은 위와 같이 정이되어 있다. 높이가 고정되어 있고, overflow-y : scroll이 되어있기 때문에 모바일 환경에서 툴팁을 보게되면 스크롤과 관련해서 사용자 경험에 좋지 못한 문제가 생겼다.\n\n![클릭한 셀과 툴팁이 떨어지면 안되는데...](./assets/bad-ux-tooltip.png)\n\n가장 짙은 색의 셀을 클릭하면 툴팁이 나오게 되고, 이 상태에서 스크롤을 하게 되면 셀과 툴팁이 떨어져버리는 문제가 발생했다. 높이가 고정되어 있고 `overflow-y : scroll` 속성에 의해서 스크롤이 되는 것이기 때문에 툴팁은 처음 렌더링 된 위치에 가만히 있고 툴팁 뒤의 셀만 움직이기 때문에 발생한 현상이었다.\n\n이 문제를 해결하기 위해서 높이를 고정하지 않고, `overflow-y : scroll` 속성을 삭제했다.\n\n```tsx\nexport const s_content = css`\n  padding: 0 1.6rem;\n`\n```\n\n![그래 이거야!](./assets/good-ux-tooltip.png)\n\n이제 스크롤을 해도 셀과 툴팁은 떨어지지 않게 되었다. 하지만, 이미지에서 확인할 수 있는 것 처럼, 헤더에 position 속성이 없기 때문에 스크롤을 하면 헤더도 함께 올라가서 눈에 보이지 않는 문제가 발생했다. 스크롤을 하다가 중간에 메뉴 바를 클릭하거나 홈으로 이동하고 싶은 사용자들을 위해서 헤더는 고정되었으면 좋겠다 생각해서. `position : fixed` 속성을 추가했다. 그러나…\n\n![](./assets/header-fixed.png)\n\n`fixed` 속성은 부모의 css 속성을 무시하고, 뷰포트 기준으로 크기, 위치를 결정하기 때문에 글로벌 레이아웃 스타일을 무시하는 문제가 생겼다. `sticky` 속성 사용으로 해결했지만, 두 속성에 어떤 차이가 있는지 궁금했다.\n\n## 1) fixed\n\nMDN에서는 fixed 속성에 대해서 다음과 같이 설명한다.\n\n> _The element is removed from the normal document flow, and no space is created for the element in the page layout. The element is positioned relative to its initial [containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block), which is the viewport in the case of visual media. Its final position is determined by the values of `top`, `right`, `bottom`, and `left`.\n> This value always creates a new [stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context). In printed documents, the element is placed in the same position on every page._\n>\n> _요소는 일반 문서 흐름에서 제거되며 페이지 레이아웃에서 요소에 대한 공간이 생성되지 않습니다. 요소는 초기 포함 블록(시각적 미디어의 경우 뷰포트)을 기준으로 배치됩니다. 최종 위치는 위쪽, 오른쪽, 아래쪽, 왼쪽 값에 의해 결정됩니다._\n>\n> _이 값은 항상 새로운 스태킹 컨텍스트를 생성합니다. 인쇄된 문서에서 요소는 모든 페이지에서 동일한 위치에 배치됩니다_\n\n여기서 일반 문서 흐름이란 html로 마크업을 할 때, 위에서부터 아래로 내려오는 순서를 말한다.\n\n```tsx\n<div>1</div>\n<div>2</div>\n<div>3</div>\n```\n\n해당 마크업 구조에서 1, 2, 3이 위에서부터 아래로 순서대로 나타날 것임을 예상할 수 있다. 이는, html 태그들의 position 속성이 기본적으로 `static` 이기 때문이다. MDN에서는 staitc을 다음과 같이 설명한다.\n\n> \\*The element is positioned according to the Normal Flow of the document. The top, right, bottom, left, and z-index properties have no effect. This is the default value.\n\n요소는 문서의 일반 흐름에 따라 배치됩니다. 위쪽, 오른쪽, 아래쪽, 왼쪽 및 z-인덱스 속성은 영향을 미치지 않습니다. 이것이 기본값입니다.\\*\n\n>\n\n```tsx\n<div>1</div>\n<div>1</div>\n<div>1</div>\n<FixedHeader />\n```\n\n만약 position 속성이 fixed인 FixedHeader를 위와 같은 구조로 마크업을 하면,\n\n![](./assets/header-ignore-sequence.png)\n\n위와 같이 문서 일반 흐름을 무시해서 배치된다.\n\n일반 문서 흐름에서 벗어나기 때문에, `GlobalLayout` 컴포넌트에서 `width`, `max-width`를 설정해도 부모-자식 관계가 형성되지 않아 속성을 무시하게 되는 것이었다.\n\n## 2) sticky\n\nMDN에서는 sticky 속성에 대해서 다음과 같이 설명한다.\n\n> \\*The element is positioned according to the normal flow of the document, and then offset relative to its nearest scrolling ancestor and containing block (nearest block-level ancestor), including table-related elements, based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements.\n\n요소는 문서의 일반적인 흐름에 따라 배치된 다음 위, 오른쪽, 아래, 왼쪽 값을 기준으로 테이블 관련 요소를 포함하여 가장 가까운 스크롤 조상 및 포함 블록(가장 가까운 블록 수준 조상)을 기준으로 오프셋됩니다. 오프셋은 다른 요소의 위치에는 영향을 주지 않습니다.\\*\n\n> _이 값은 항상 새로운 스태킹 컨텍스트를 생성합니다. 고정 요소는 '스크롤 메커니즘'(오버플로, 스크롤, 자동 또는 오버레이가 숨겨진 경우 생성됨)이 있는 가장 가까운 조상이 실제로 가장 가까운 스크롤 조상이 아니더라도 그 조상에 \"고정\"됩니다._\n\nsticky 속성을 가지면 기본적으로 일반 문서 흐름에 따라 배치되지만, `top` `right` `bottom` `left` 속성에 할당한 값만큼 해당 요소에 닿으면 그 후 fixed 처럼 동작하게 된다. 글로만 설명하니 이해하기 어려운 것 같다. 예시를 보자.\n\n```tsx\n<div>1</div>\n<div>2</div>\n<div>3</div>\n<StickyHeader />\n```\n\n마크업 구조가 다음과 같이 되어있고, StickyHeader의 스타일이\n\n```tsx\nposition: sticky\ntop: 0\n```\n\n위와 같다면 우선 기본적으로 일반 문서 흐름에 따라 1, 2, 3 아래에 StickyHeader가 위치한다.\n\n![](./assets/header-follow-sequence.png)\n\n스크롤을 통해서 `top : 0` 에 즉, 헤더의 가장 윗 부분에 스크롤이 닿는다면 그 후 fixed처럼 동작하게 된다. 기본적으로 일반 문서 흐름에 맞게 배치되기 때문에 부모 - 자시 관계도 형성할 수 있어, `GlobalLayout` 컴포넌트에서 설정한 width 설정을 사용할 수 있게 되었다!\n"},{"excerpt":"디자인을 하자 1차 스프린트와 해커톤이 끝난 후, 본격적으로 개발을 시작하기 전 1차 스프린트에서 해야했던 설정 중 남아 있던 설정들을 했다. 테스트 환경 설정(RTL, Storybook) 폴더구조 절대경로 설정 웹팩(webpack) 환경에서 이미지(asset)들을 사용할 수 있도록 설정 서비스에서 사용 할 폰트 설정 프론트엔드 팀 코드 리뷰 문화 결정 …","fields":{"slug":"woowacourse-level-3-3th-sprint-retrospect"},"frontmatter":{"date":"July 28, 2024","title":"우아한테크코스 레벨 3 2차 스프린트 회고","tags":["회고","우아한테크코스"]},"rawMarkdownBody":"\n## 디자인을 하자\n\n1차 스프린트와 해커톤이 끝난 후, 본격적으로 개발을 시작하기 전 1차 스프린트에서 해야했던 설정 중 남아 있던 설정들을 했다.\n\n- 테스트 환경 설정(RTL, Storybook)\n- 폴더구조 절대경로 설정\n- 웹팩(webpack) 환경에서 이미지(asset)들을 사용할 수 있도록 설정\n- 서비스에서 사용 할 폰트 설정\n- 프론트엔드 팀 코드 리뷰 문화 결정\n\n위 작업들을 모두 하니, 어느새 한 주가 모두 끝나버렸다. (~~큰일이야...~~) 우테코 미션은 대부분 `package.json` 설정이 되어 있는 상태였기 때문에 프로젝트 환경 설정에 신경을 쓰기 보다는 미션에서 주어지는 문제를 '잘' 해결하는 것에 신경을 써야했다. 하지만 레벨 3 프로젝트를 진행하면서 부터는 아예 비어있는 폴더, 파일들을 채워가야 했다. `npm init` 부터, 프로젝트를 진행하기 위한 의존성들을 추가하고 동작을 확인하는 것 까지 모든 것에 신경을 써야했다. 설정을 하고 동작을 확인하고 다음으로 넘어가는 것이 아닌, 설정을 하는 과정에서 설정 파일의 특정 속성이 왜 필요하고, 어떤 역할을 하는 것인지 의문을 가지고 그 의문을 해결하기 위해 이것저것 알아보니 시간이 정말 많이 지났다. 설정의 모든 속성을 이해하는 것이 문제 해결을 잘 하고, 서비스를 잘 만드는 것이라고는 할 수 없겠지만 처음부터 설정을 하다보니 중간중간 궁금증이 생겼고 속성들을 알아가는 것이 재밌어서 계속 알아보려고 했따. 팀원들도 나와 비슷한 성향이라서 모든 속성들을 다 함께 탐구하느라 1차 스프린트에 프로젝트 환경 설정을 마쳐야 했는데, 모든 설정을 끝내니 어느새 2차 스프린트의 첫 주가 지나버렸다. (~~공원이 차라리 대학원에 가는 것이 어떻냐고도 했었다...ㅋㅋ~~)\n\n2차 스프린트에서는 사용자에게 다음과 같은 경험들을 제공하기로 했다.\n\n### 약속 주최자는 약속을 생성할 수 있다.\n\n약속 주최자는 약속을 생성한 후, 약속 참여자들을 해당 약속에 초대할 수 있는 경험을 제공하기로 했다. 약속을 생성할 때는\n\n- 약속 이름\n- 약속 주최자의 정보 (닉네임, 비밀번호)\n- 약속 날짜의 범위 ex) 07/22 ~ 07/26\n- 약속 시간의 범위 ex) 오전 10시 ~ 오후 6시\n\n위 정보들을 받기로 했으며, 약속 정보들을 입력하고 약속을 생성하면 참여자들을 초대할 수 있는 링크를 생성해주기로 했다.\n\n### 약속 주최자, 참여자 모두 약속 시간 현황을 조회할 수 있다.\n\n약속 주최자와 초대 링크를 받은 참여자들이 약속 시간 현황을 조회할 수 있는 경험을 제공하기로 했다. 해커톤에서는 약속에 참여하는 사람을 1명으로 가정하고, 참여할 수 있는 시간을 표시, 수정, 공유할 수 있도록 했다면 이번 스프린트에서는 약속에 참여하는 n명의 사람들 모두에게 참여할 수 있는 시간을 표시, 수정, 공유할 수 있도록 해줘야 했다.\n\n### 약속 주최자, 참여자들은 1명에 대한 시간만 조회할 수 있다.\n\n우리 서비스의 핵심, 해결하려고 하는 문제에 대해서 다시 한 번 언급하자면, '실제로 만남을 갖기 전 결정해야 하는 요소들을 빠르게 결정할 수 있도록 돕는 것'이다. 만남을 갖기 전 결정해야 하는 요소를 시간, 장소 크게 두 가지로 다시 나눴고 현재는 시간과 관련된 의사 결정 문제를 해결하고 있다. '빠르게 결정할 수 있도록 돕는 것'이 핵심이기 때문에, 어떻게 하면(HOW?) 더 빠르게 결정할 수 있도록 도와줄 수 있을까에 대해서 회의에서 이야기를 한 결과, 약속에 참여하는 전체 n명 중 특정 1명이 선택한 시간을 보여준다면 도움을 줄 수 있을 것 같다는 이야기가 나왔다. 링크를 전달받은 사용자 입장에서 생각해 보면, 약속에 참여하는 사람 중 유독 심리적으로 가까운 사람이 있을 것이고 전체 현황이 다 궁금하기 보다는 그 사람이 선택한 시간을 우선적으로 궁금해할 수도 있을 것이라는 생각에서 출발한 아이디어였다. 그래서 1명에 대한 시간만 필터링해서 보여줄 수 있는 기능이 있다면, 의사 결정을 더 빠르게 할 수 있도록 도와줄 수 있을 것이라고 결론을 내리고 기능을 추가하기로 했다.\n\n이제 프로젝트를 위한 환결 설정이 다 끝났고, 2차 스프린트에서 무엇을 해야 할 지도 결정이 났는데... 피그마가 백지였다. 머릿속으로는 어떤 기능들을 개발해야 할지에 대한 그림은 그려졌는데, 막상 눈 앞에 보이는 것이 아무것도 없으니 개발을 시작하기가 어려웠다. 마침 공원이 열어준 휘뚜루마뚜루 디자인 수업에서 피그마 활용법에 대해서 어느 정도 알게 되어서 그 날 밤 프론트 팀원들과 함께 2차 스프린트 개발에 필요한 만큼만 디자인을 했다.\n\n![휘뚜루마뚜루 피그마 디자인 시안](./assets/momo-design.png)\n\n2차 스프린트에서 제공해줘야 하는 경험 목록들을 바탕으로 약속 생성 페이지, 약속 조회 페이지를 만들었고 특정 약속 참여자들 필터링하기 위한 버튼도 추가했다. 디자인이 끝난 다음 날, 백엔드 팀원들과 전체 회의를 했고 디자인을 바탕으로 API 엔드포인트, 데이터 스키마(생김새)등등 기능을 만들어가기 위한 이야기를 나눴다. 이 때, 프론트든 백엔드든 상관없이 눈에 보이는 무언가라도 있어야 이야기가 좀 통한다고 느꼈다. 흰 화면에서 서로의 머릿속에 있는 페이지나 컴포넌트들을 이야기했을 때만 해도, 상대방이 어떤 이야기를 하는 것인지 이해가 되지 않을때가 있었는데 완벽하지는 않지만 어느 정도 디자인이 된 화면을 손으로 가르키면서 의견을 말하니 확실히 이해가 잘 되었다. 백엔드 팀원들도 눈에 보이는 화면이 어느 정도는 있어야 API 설계를 할 때 도움이 된다고 말하기도 했었다.\n\n## 달력을 만들자\n\n만들어진 피그마 디자인 시안을 바탕으로 낙타, 빙봉과 어떤 페이지, 컴포넌트를 개발해야 할 지에 대해 이야기를 나눴고,\n\n- 컴포넌트\n\n  - 약속을 생성하는데 필요한 입력 필드 컴포넌트\n  - 날짜를 입력하는데 필요한 달력(DatePicker) 컴포넌트\n  - 약속 생성, 수정, 등록에 사용되는 버튼 컴포넌트\n  - 약속 시간 조회 페이지에서 특정 참여자를 필터링 할 수 있는 탭 버튼 컴포넌트\n\n- 페이지\n  - 약속 생성 페이지\n  - 약속 시간 조회 페이지\n\n위와 같이 나눌 수 있었다. 나는 우선 달력 컴포넌트 개발을 맡았다. 달력 컴포넌트를 개발할 때, '달력 컴포넌트를 만드는 것'을 문제로 정의하고 레벨 2에서 배운 핵심 사고 방식인 '결국 내가 뭘 하려고 하는 것인가?'를 적용했다. 아래는 달력을 만들어 갈 때 과정을 정리한 내용이다 :)\n\n### 이 이슈에서 결국 내가 하려고 하는 것?\n\n여러 날짜가 선택 가능한 달력 UI를 구성하기.\n\n### 핵심을 1줄로 정리하기\n\n사용자는 달력 UI에서 선택하고 싶은 여러 날짜를 선택할 수 있다.\n\n달력 UI 요구 사항 더 세밀하게 분석해봤을 때, 다음과 같이 정리할 수 있다.\n\n### 달(Month)\n\n![](./assets/calendar-month.png)\n\n달(Month) UI는 다음과 같은 역할을 수행해야 한다.\n\n- 사용자가 선택한 현재 달(month)을 `YYYY년 MM월로` 표시한다.\n\n  - 년(year) 정보는 4자리 숫자로, 월(month) 정보에서 1의 자리 숫자 앞에 `0` prefix를 사용하지 않는다.\n\n- `<`, `>` 버튼을 클릭하여 현재 달을 변경할 수 있다.\n\n  - `momo` 에서 사용하는 달력에서는 과거의 달(month)로 이동할 수 없도록 한다.\n\n- 현재 달(month)의 상태에 따라서 날짜(Day) 정보가 변경되어야 한다.\n\n### 날짜(Day)\n\n![](./assets/calendar-day.png)\n\n날짜(Day) UI는 다음과 같은 역할을 수행해야 한다.\n\n- 자바스크립트의 `Date` 객체를 사용하여 해당 달(Month) 정보에 맞는 날짜 정보들을 표시해야 한다.\n\n  - 요일을 표현하는 UI를 구현한다.\n\n- 일요일과 공휴일은 빨간색으로 표시해야 한다. 아래와 같은 형태로 구성해야할 듯 하다.\n\n```tsx\n<Day isHoliday={true or false} />\n```\n\n### 클릭 이벤트 처리\n\n![](./assets/calendar-click-event.png)\n\n- 사용자가 날짜를 클릭하면 해당 날짜의 배경 색을 accentColor로 변경한다.\n\n```jsx\n<Calendar accentColor=\"#123456\" />\n```\n\n- 달력 UI를 사용하는 측에서 관리하는 클라이언트 상태에 해당 날짜를 포함시킨다.\n\n```jsx\nconst selectedDates = [\"2024-07-23\", \"2024-07-24\", , , ,]\n```\n\n위와 같이 정리를 하니 내가 무엇을 해야 하는지 확실히 정의를 내리고 작업을 시작할 수 있었다. 달(month)를 변경시키는 작업은 꽤 난이도가 있다고 생각해, '현재 `momo` 달력은 7월 밖에 보여주지 않는다'라고 가정한 후 7월 달력이라도 동작하는 것을 확인하기로 했다. 동작을 확인한 후 다음, 이전 달로 넘어가는 기능을 추가했다. 7월의 시작일이 1일이라서 1일이 시작일이 아닌 달에 대한 예외 처리를 생각하지 않았었는데, 8월로 넘기자마자 실제 달력과 내 달력이 다른 문제가 발생했었다...ㅠ\n\n이 문제를 해결하기 위해서 자바스크립트의 Date 객체를 활용해서 달(month)의 첫 번째 요일에 해당하는 인덱스 + 달의 마지막 날짜를 더한 만큼 슬롯을 생성하고 해당 슬롯의 갯수 만큼 반복문을 돌면서 인덱스가 첫 번째 요일에 해당하는 인덱스보다 작으면 빈 칸을 출력하고 그렇지 않으면 날짜를 출력하도록 했다. 처음에는 빈 칸도 `button` 태그를 사용하고 내용만 채우지 않는 방식을 사용했는데 낙타의 코드 리뷰를 통해서, 웹 접근성을 높이기 위해서는 실제로 클릭할 수 없는 요소에만 `button` 태그를 사용하는 것이 좋다는 것을 알게되었다!\n\n![낙타 짱](./assets/nakta-review.png)\n\n```jsx\nreturn isDate ? (\n  <button key={dateString} onClick={() => onDateClick(dateString)} css={s_daySlotButton}>\n    <span css={[s_daySlot(isHoliday), s_selectedDaySlot(isSelectedDate)]}>{date}</span>\n  </button>\n) : (\n  <div key={dateString} css={s_daySlotButton}></div>\n```\n\n그래서 날짜를 표시해야 하는 경우에만 `button` 태그를 사용하도록 했다. [PR](https://github.com/woowacourse-teams/2024-momo/pull/68)\n\n## 시간 조회, 수정 페이지 구현\n\n해커톤에서 약속 참여자를 1명이라고 가정했다면, 2차 스프린트에서는 n명 참여자들의 약속 현황을 조회하고 특정 참여자의 시간만 조회할 수 있도록 해야했다. 시간을 조회, 공유, 수정하는 기능은 해커톤에서 정의한 우리 서비스의 가장 핵심이 되는 기능이었고 어느 정도 구현이 되어있는 기능이었기 때문에 1명에서 n명으로 달라진 상황에 대해서만 처리해주면 됐다. 사용자가 전체 참여자들을 조회하는 경우와 특정 참여자를 필터링해서 조회하는 경우, 데이터를 다른 형태로 전달받기로 백엔드 팀원들과 결론을 내렸다.\n\n- 전체 참여자\n\n```\n{\n  \"data\": {\n    \"schedules\": [\n      {\n        \"date\": \"2024-07-24\",\n        \"time\": \"13:00\",\n        \"attendeeNames\": [\"해리\", \"낙타\", \"빙봉\"]\n      },\n      {\n        \"date\": \"2024-07-24\",\n        \"time\": \"14:00\",\n        \"attendeeNames\": [\"낙타\", \"빙봉\"]\n      },\n      ,,,\n    ]\n  }\n}\n```\n\n전체 참여자를 조회하는 경우에는 특정 시간을 선택한 참여자들의 이름을 배열로 전달해주기로 했다. 이렇게 배열로 전달해준 이유는, 3차 스프린트에서 특정 시간을 클릭하면 해당 시간을 선택한 사용자들을 툴팁 UI 형태로 보여주기로 했기 때문이다.\n\n![](./assets/tooltip.png)\n\n- 특정 1명의 참여자\n\n```\n{\n  \"data\": {\n    \"attendeeName\": \"해리\",\n    \"schedules\": [\n      {\n        \"date\": \"2024-07-25\",\n        \"times\": [\"12:00\", \"13:00\", \"14:00\"]\n      },\n      ,,,\n    ]\n  }\n}\n```\n\n특정 1명의 참여자를 조회하는 경우에는 참여자 이름과, 해당 참여자가 선택한 시간을 배열로 담아서 전달받기로 했다.\n\n해당 기능을 구현하기 위해서,\n\n- 약속 참여자들의 이름을 하나의 탭 버튼으로 만들고 해당 버튼을 클릭할 때마다 현재 참여자를 변경\n- 참여자가 달라질 때마다 서버에 해당 참여자의 시간 정보를 가져오는 API를 요청\n\n위 사고 흐름을 거쳤다.\n\n```tsx\n<section css={s_attendeesContainer} aria-label=\"약속 참가자들 정보\">\n  <button css={s_tabButton(selectedAttendee === '')} onClick={() => handleAttendeeChange('')}>\n    전체\n  </button>\n  {meetingAttendees.map((attendee) => (\n    <button\n      key={attendee}\n      css={s_tabButton(selectedAttendee === attendee)}\n      onClick={() => handleAttendeeChange(attendee)}\n    >\n      {attendee}\n    </button>\n  ))}\n</section>\n\n->\n\nconst { data: meetingSchedules } = useQuery({\n  queryKey: [QUERY_KEY.meetingSchedules, selectedAttendee],\n  queryFn: () => handleGetMeetingSchedules({ uuid, attendeeName: selectedAttendee }),\n  staleTime: 0,\n});\n```\n\n전체 코드는 아니지만, 로직의 핵심만 코드로 나타내 보자면 위와 같다.\n\n![잘 된다!](./assets/meeting-filter.gif)\n\n## 2차 데모데이 준비...해치웠나?\n\n지금까지 2차 데모데이를 준비하면서 어떤 일(WHAT?)을 했는지 나열했다. 이 일들이 과연 척척 잘 되었는가에 대해서 이야기 해보자면 **전혀 그렇지 않았다**라고 할 수 있다.\n\n### 잠을 잡시다!\n\n![.....](./assets/2th-retrospect.png)\n\n2차 데모데이가 끝나고 KPT 회고를 했는데, 내용의 절반이 수면에 관한 이야기이다. (~~좀 처참하다...ㅋㅋ~~) 회고 제일 첫 부분에 1차 스프린트에서 다 하지 못한 프로젝트 설정을 하느라 2차 스프린트의 첫 주를 써버렸다고 했었다. 매 스프린트마다 2주가 주어지는데 설정에 1주일을 더 썼다는 것은 위에서 언급한 기능 구현들을 1주일 아니 5일만에 했다는 뜻이 된다. 디자인에 1일을 썼고, 금요일 데모데이는 사실 상 개발을 하는 날이 아니니 실제로 2주동안 개발을 한 날은 화, 수, 목 3일이었다. 3일 안에 낙타, 빙봉 그리고 나는\n<br/>\n\n- 약속 생성 페이지 구현\n- 약속 링크 공유 페이지 구현\n- 약속에 참여하지 위한 로그인 기능 구현\n- 약속 조회 페이지 생성 및 특정 참여자 약속 참여 시간 필터링 기능 구현\n- 위 모든 기능에 대한 API 연결\n\n회고를 하는 지금에도 어떻게 해냈는지...\n코치님들께서는 구현적인 부분, 기술적인 부분에 대해서 칭찬을 해주셨는데 3일동안 3-4시간을 자면서 구현했다고 말씀 드리면 칭찬을 다시 회수하시지 않을까...생각했다. 3일안에 다 구현을 못할 것 같아, 낙타, 빙봉은 여기서 걷어낼 수 있는 부분은 걷어내자고 했지만 나는 생각보다 어렵지 않은 기능들이라 충분히 할 수 있다고 의견을 냈다. 2차 스프린트에서 구현하기로 한 기능들이라 해야할 것 같다는 생각으로부터 비롯된 의견이었다. 레벨 2에서는 개발과 일상을 구분하고 일상을 잘 느끼기 위한 노력들을 했는데, 마감 기한이 다가오니 레벨 2에서 연습한 유연함이 사라져버렸다. 결국 내 의견을 수용해줘서 위 모든 기능들을 구현하기로 했고, 막상 해보니 3일안에 해내기에는 벅찬 기능들이었다. 그래서 수면을 줄여가며, 퇴근을 해도 게더에 모여서 함께 개발을 진행했다. 피로가 누적되다 보니 데모데이 당일에 낙타, 빙봉의 컨디션이 정말 좋지 않았고 괜히 나 때문에 그렇게 된 것 같아 정말 미안했다...😭 적당한 열정이 장기적인 관점에서는 더 좋다고 느꼈다.\n\n### 백로그를 활용해 봅시다!\n\n나를 포함한 팀원들 모두가 바빠지면, 각자의 작업에 집중하느라 자연스럽게 다른 팀원들이 현재 어떤 작업을 집중해서 하고 있는지 잘 알기가 힘들다는 생각이 들었다. 그래서 2차 스프린트 1주차 주말에 팀원들 모두가 백로그를 잘 활용해보면, 서로의 작업에 대해서 빠르게 파악을 할 수 있을 것 같다는 생각을 했다. 2주차 월요일에 백로그 템플릿을 만들어서 팀원들에게 공유했고, 한 번 사용해보자는 제안을 했다. 팀원들이 흔쾌히 나의 의견을 수용해줘서 고마웠다!\n\n![](./assets/backlog.png)\n\n내가 제안한 백로그 템플릿은 위와 같다.\n\n- 에픽 : 에픽은 여러개의 스토리로 나뉠 수 있는 대규모 작업이다. 추상화 단계가 가장 높게 표현된다.\n- 스토리 : 사용자 관점에서 표현한 기능에 대한 설명이다.\n- 태스크 : 사용자에게 특정 스토리를 제공해주기 위해서 어떤 작업(WHAT?)을 해야하는지 세분화해서 작성한다. 추상화 단계가 가장 낮게 표현된다.\n\n내가 제안한 백로그 템플릿은 프론트엔드, 백엔드 구분 없이 전체 팀 단위로 작성하는 것이었고 사용자에게 특정 경험을 제공해주기 위해서 우리 팀 전체가 어떤 노력을 하고 있는지를 빠르게 파악할 수 있다는 장점이 느껴졌다. 물론 단점도 있었다. 1개의 작업을 시작하면, 이슈를 파고 작업이 끝나면 PR Description도 작성하는데 백로그까지 작성한다면 글 작성에 너무 많은 시간을 사용하게 된다는 것이다. 하지만, 백로그에는 특정 작업(태스크)를 어떻게 진행했는지에 대해 기록하거나 트러블 슈팅을 기록하는 연습장으로 활용할 수 있기 때문에 다른 사람들이 어떻게 작업을 진행했는지 자세히 알고 싶다면 해당 백로그 페이지를 방문하면 소통이 더 쉬워질 수 있다고 생각했다. 앞으로 남은 스프린트 기간에도 적극적으로 활용해 봐야겠다.\n\n### 업무 알람 자동화를 해봅시다!\n\n![](./assets/kakao-alarm.png)\n\n2차 스프린트를 준비하면서 특정 작업이 마무리 되어 PR을 날리거나, 코드 리뷰(Changes Request)를 하면 카톡으로 연락을 주고 받았다. 매 번 이렇게 연락을 주고 받는 것이 너무 불편하다고 생각해, 다음 스프린트부터는 슬랙 or 디스코드의 웹 훅(Web Hook)을 활용해서 특정 작업에 대해 알람이 오도록 해야겠다고 느꼈다. (~~내 카톡을 불태울 수 없다...~~)\n\n## 2차 스프린트를 진행하면서...\n\n2차 스프린트를 진행한 2주동안 꽤 많은 것을 느꼈다.\n\n- 팀원 전체가 문제를 해결하는 방법들에 대해 의견이 정리 되었고, 기능이 도출되면, 다음 이야기를 하기 위해서 가장 작은 버젼의 디자인이라도 필요하다는 것. 즉, 눈에 보이는 것도 소통에 많은 영향을 준다는 것\n\n- 급박한 상황이 오면 유연함이 점점 없어진다는 것. 이건 개발에만 해당되는 내용이 아니라 앞으로 살아가면서 정말 많이 느낄 것 같다.\n\n- 장기전에는 적당한 열정이 필요하다는 것\n\n- 나를 제외한 7명의 팀원들이 현재 무엇을 하고 있는지 모두 파악하기는 힘들지만, 필요할 때 빠르게 찾아볼 수 있는 방법을 고민해본 것\n\n- 업부 알람 자동화가 정말 필요하다는 것\n\n그냥 '음... 이런 것 느꼈군!'하고 넘기지 않고 개선하기 위해 의식적으로 노력하며 3차 스프린트를 맞이해 봐야겠다 :)\n"},{"excerpt":"해커톤을 한다구요…?  레벨 3 프로젝트 1차 스프린트에 대한 데모데이가 종료되고, 팀원들과 1차 스프린트에 대한 회고를 하는 중 슬랙에 포비가 다음 주 월요일에 우테코만의 해커톤을 진행한다는 공지를 올리셨다. ‘엥…? 갑자기 해커톤? 띠용…’ 했지만 대수롭지 않게 생각하고 스프린트 회고를 진행했다. 우테코를 시작하기 전 GDSC 동아리에서 주최한 해커톤…","fields":{"slug":"woowacourse-level-3-hackathon-retrospect"},"frontmatter":{"date":"July 18, 2024","title":"우아한테크코스 레벨 3 해커톤 회고","tags":["회고","우아한테크코스"]},"rawMarkdownBody":"\n## 해커톤을 한다구요…?\n\n![](./assets/announce.png)\n\n레벨 3 프로젝트 1차 스프린트에 대한 데모데이가 종료되고, 팀원들과 1차 스프린트에 대한 회고를 하는 중 슬랙에 포비가 다음 주 월요일에 우테코만의 해커톤을 진행한다는 공지를 올리셨다.\n\n‘엥…? 갑자기 해커톤? 띠용…’ 했지만 대수롭지 않게 생각하고 스프린트 회고를 진행했다. 우테코를 시작하기 전 GDSC 동아리에서 주최한 해커톤에 참여했을 때 밤을 새면서 코딩을 한 후 체력적으로 너무 지쳐서 앞으로 특별한 일이 없는 한 해커톤에 참여하지 않겠다고 다짐했었다. 그렇기에 월요일에 진행하는 해커톤에서도 밤은 절대로 새지 않을 것이라고 생각했고, 밤 새기 싫다고도 말했다.\n\n??? : 해커톤 참여는 필수인데, 밤 새는건 필수 아니라는데? ‘에이…설마 또 밤 새겠어?’ 나 집 일찍가서 잘건데?\n\n하지만 정말 큰 플래그를 세워버렸다. 다시는 밤을 새지 않겠다는 다짐과 선언들이 이번 해커톤에서 전혀 소용이 없었다.\n\n지금 이 회고 글도 캠퍼스에서 2시간 잠시 눈을 붙인 것을 제외하고는 밤을 꼴딱 샌 직후 작성하고 있다…\n\n![](./assets/kakaotalk.png)\n\n혹시 몰라서 팀원들에게 밤을 샐 의향이 있는지 물었는데, 아무 말 없이 슬픈 이모지가 달렸다. 이것도 플래그 였을까? 우리 팀의 절반이 거의 해가 뜰 때까지 캠퍼스에 남아있었고, 먼저 집으로 귀가한 팀원들도 게더에서 열심히 새벽까지 해커톤에 참여했다.\n\n(’앞으로 밤을 절대 새지 않을 것이다’와 같은 단언은 하지 말아야겠다.)\n\n## 해커톤 OT : 요구사항 소개\n\n![wow...!](./assets/ot.png)\n\n해커톤 첫 날 오후 2시 해커톤의 목표와 함께 요구사항이 소개되었다.\n\n> _레벨 3에서 만들 우리 서비스의 모습을 팀원들과 함께 그려보고 가장 핵심이 되는 기능 1개를 선정해 24시간 안에 개발, 시연한다._\n\n요구사항을 보자마자 ‘또 우리를 극한의 야생으로 던지는구나…’라고 생각했고 가방을 싸고 그대로 다시 집으로 가고 싶었다. 밤을 새는 것은 필수가 아니라고 했지만, 뭔가 밤을 샐 것 같다는 느낌이 왔고 그 느낌은 정확이 들어맞았다.\n\n![요구사항을 보자마자 노션 페이지에 적었던 말…](./assets/diary.png)\n\n1차 스프린트 데모데이에서 코치분들에게 소개한 우리 팀 프로젝트의 핵심 중의 핵심은 **약속에 참여하는 사람들이 자신의 시간을 공유하고 다른 사람들의 시간을 확인할 수 있도록 하는 것**이었다. 테이블 UI를 활용해서 시간을 드래그해서 표시할 수 있도록 하고, 시간 데이터를 포매팅해서 서버에 보낼 수 있도록 해야 했는데, 1차 스프린트에서 디자인 작업을 전혀 하지 않았어서 디자인과 드래그 기능을 24시간 안에 구현해야 했다. 심지어 드래그 기능은 이전에 한 번도 구현해 본 적이 없어 너무나도 막연했다. 이런 막연함이 자연스럽게 ‘아…나 밤 새겠다’라는 생각으로 이어졌다.\n\nOT가 끝난 후, 어차피 밤을 샐 것 같으니 이 때부터 즐기자는 마인드로 해커톤에 임했다.\n\n![](./assets/snack.png)\n\n간식들도 많이 챙겨 주셨고, 이 날이 초복이라서 치킨과 피자도 시켜주신다고 하셨다! 맛있는거 먹으면서 즐겁게 해커톤 해보자~ 라고 생각했다.\n\n## 핵심을 구현해 봅시다, 핵심!\n\n우리 팀 프로젝트의 핵심 기능인 “**약속에 참여하는 사람들이 자신의 시간을 공유하고 다른 사람들의 시간을 확인할 수 있도록 하는 것”**을 24시간 안에 구현하기 위해서 제한 시간내에 구현할 수 있는 가장 작은 버전에 대해서 이야기를 나누었다.\n\n팀원들과 이야기를 많이 나누면서 약속을 생성하는 것, 약속에 참여하는 사람들이 같은 페이지에서 시간을 표시하도록 하기 위해서 공유 링크를 생성하는 것, 가장 많은 인원이 만날 수 있는 약속 시간 추천 등과 같은 기능들은 있으면 좋은 기능이긴 하나 **진짜 핵심**은 아니라고 판단했다. 진짜 핵심은 시간 표시, 수정, 공유라고 생각했기에\n\n- 홈페이지가 약속에 참여할 수 있는 시간을 표시하고 수정할 수 있는 페이지라고 가정한다.\n- 약속에 참여하는 참여자는 `momo` 1명이라고 가정한다.\n- 시간을 확인해야 하는 날짜의 범위는 일주일이라고 가정한다.\n\n위와 같은 가정들을 세우고 핵심을 포함하는 가장 작은 버젼을 이번 해커톤에서 구현하기로 결정했다.\n\n레벨 2에서 가장 많이 강조됐던 사고 방식인 ‘결국 우리가 무엇을 하려고 하는 것인가?, 내가 제공해주려고 하는 가치가 핵심을 포함한다고 가정했을 때 동작이 가능한 가장 작은 버젼은 뭐지?’가 이번 해커톤에서 핵심을 포함하는 기능을 뽑아내는데 많은 도움이 되었다.\n\n([해커톤을 위한 이슈](https://github.com/woowacourse-teams/2024-momo/issues/6))\n\n내가 속한 프론트 팀에서는\n\n1. 시간을 표시할 수 있는 페이지, UI를 구성한다.\n2. 약속에 참여할 수 있는 시간을 표시, 수정할 수 있는 기능 제공한다.\n3. 서버가 사용자가 가능한 시간을 저장할 수 있도록 한다.\n\n위 3가지 태스크를 수행해야 했다.\n\n### 1) 시간을 표시할 수 있는 페이지, UI를 구성!\n\n![](./assets/design.png)\n\n1차 스프린트를 준비했던 2주 동안, 디자인 작업을 전혀 하지 않았어서 피그마를 급하게 만들고 호다닥 디자인을 마무리 했다. 30분 단위로 시간을 표시할 수 있도록 해주려고 했지만, 이 방법을 사용할 경우 시간을 선택할 수 있는 박스들이 너무 많아져서 해커톤에서는 1시간 단위로 표시할 수 있도록 했다.\n\n우리 팀 이름은 ‘모두 모여’를 줄여서 ‘모모’이고, 모모가 일본어로 복숭아를 뜻하는 단어여서 메인 컬러를 분홍색으로 잡았고, 강조해야 하는 영역에 메인 컬러를 사용하기로 했다.\n\n(~~다 만들고 한 생각 ‘오…잘 만들었는데?’ 집에 일찍 가겠는데?~~)\n\n![또 먹고싶네...🤤](./assets/chicken-pizza.png)\n\n디자인을 완성한 후, 치킨 & 피자를 먹을 때만 해도 행복했다…\n\n??? : 먹고 빠르게 기능 쳐내고 집 ㄱ?\n\n??? : 오 좋은데, 빨리 끝나면 롤 ㄱ?\n\n라는 대화도 오갔다.\n\n### 2) 약속에 참여할 수 있는 시간을 표시, 수정할 수 있는 기능 제공!\n\n급하게 완성된 디자인 시안을 바탕으로 컴포넌트를 구성하고 드래그로 시간을 표시하는 기능을 추가해야 했다.\n\n우리가 제공해줘야 하는 기능을 세세하게 분석해 봤을 때 다음과 같았다.\n\n<details>\n<summary>요구 사항 분석 보기</summary>\n<div markdown=\"1\">\n\n## 큰 틀에서 요구 사항 분석하기\n\n1. 클릭, 드래그 이벤트를 모두 지원할 수 있어야 한다.\n\n⇒ 브라우저의 경우 MouseEvent, 모바일의 경우 TouchEvent를 사용한다.\n\n2. value의 타입은 아직 미정이지만 현재 구현은, `boolean[][]` 이어야 한다.\n\n⇒ `boolean[][]` 자료구조를 사용할 지, 날짜 데이터가 담긴 자료구조를 사용할 지는 미정이다.\n\n### 클릭 기능 요구 사항\n\n1. false → click → true 안\n\n2. true → click → false\n\n⇒ 클릭은 이벤트 시작 셀과 종료 셀이 같다.\n\n### 드래그 기능 요구 사항\n\n1. 테이블 내부에 존재하는 임의의 한 셀이 출발 셀이라고 가정했을 때, **사용자가 드래그를 종료하는 마지막 셀** 까지 다음의 동작을 만족해야 한다.\n\n⇒ 출발 셀 값을 x라고 가정했을 때, 출발지 → 목적지 좌표 사이에 존재하는 모든 셀의 값은 !x가 되어야 한다.\n\n⇒ 선택된 시간을 취소할 때, 취소하고자 하는 영역을 벗어나서 새로운 시간을 추가 할 수는 없다.\n\n2. 드래그를 시작하고, 드래그를 하면서 지나온 영역을 다시 되돌아 갔을 때 시간 선택도 되돌릴 수 있어야 한다.\n\n</div>\n</details>\n<br/>\n\n요구사항을 차분히 분석 한 후, 진짜 어려운 문제를 해결하고 있다는 것을 깨달았다. 아무래도\n\n전체 기획 ⇒ 스프린트 단위로 기능 나누기 ⇒ 나눈 기능 가운데에서도 핵심\n\n이 순서대로 해커톤에서 구현해야 하는 기능이 결정되었다 보니, 핵심중에 핵심을 뽑게 되었고, 자연스럽게 구현해야 하는 기능의 난이도가 올라갔다. 해커톤에서 만들어야 하는 요구사항을 제대로 분석했을 때는 이미 캠퍼스를 나갈 수 있는 시간인 11시를 벗어났었고, 집중할 수 있는 체력도 거의 다 써버려서 ‘이거 24시간안에 해결할 수 있는 문제가 맞았나?’하는 의심을 하기 시작했다.\n\n하지만 집에 가지 않기로 마음 먹은 이상, 어떻게든 동작하는 쓰레기라도 만들어보자는 생각을 했다! 가보자고!\n\n![텅...](./assets/room.png)\n\n우리와 비슷한 기능을 구현하셨던 분들이 정리해주신 여러 블로그를 참고해서, `useRef` 훅을 활용해서 테이블 정보를 저장하고 2차원 배열을 순회하면서 시간을 표시 하는 방식으로 구현했다!\n\n![](./assets/draggable-timatable.gif)\n\n수정하기 버튼을 누를 때만 드래그를 통해서 시간을 표시 할 수 있도록 하는 기능도 추가했다!\n\n### 3) 서버가 사용자가 가능한 시간을 저장할 수 있도록!\n\n사용자가 약속에 참여할 수 있는 시간을 표시하면, 저장할 수 있도록 서버에 데이터를 전송해줘야 하는 일이 남았다.\n\n서버 상태를 관리하기 위한 방법에 대해서 빙봉, 낙타와 얘기를 한 후 빠르게 리액트 쿼리를 사용하기로 결정했다. 모두가 레벨 2 리액트 과정에서 이미 사용해본 적이 있는 라이브러리라서 해커톤에서 정의한 문제를 해결하기 위한 기술로써 도입하기 위해 크게 문제가 되지 않을 것이라 판단했고, 나중에 시간 뿐만이 아닌 날짜 상태도 관리해야 할 때가 오면 어차피 사용하게 될 라이브러리라는 맥락으로 좁혀져 빠르게 `npm install` 했다 ㅋㅋ!\n\n서버에서는 약속에 대한 데이터를\n\n```\n{\n  \"data\": {\n    \"availableDates\": [\"2024-07-16\", \"2024-07-17\", \"2024-07-18\"],\n    \"meetingName\": \"약속 이름\",\n    \"startTime\": \"00:00\",\n    \"endTime\": \"24:00\",\n    \"schedules\": [\n      {\n        \"date\": \"2024-07-16\",\n        \"times\": [\"18:30\", \"19:30\", \"20:30\"]\n      },\n      {\n        \"date\": \"2024-07-17\",\n        \"times\": [\"18:30\", \"19:30\", \"20:30\"]\n      },\n      {\n        \"date\": \"2024-07-18\",\n        \"times\": [\"18:30\", \"19:30\", \"20:30\"]\n      },\n    ]\n```\n\n위와 같은 형태로 넘겨줬다.\n\n약속에 대한 정보가 클라이언트 측으로 넘어오면\n\n- `startTime` ~ `endTime` 만큼을 열, `schedules` 배열의 길이 만큼을 행으로 크기를 가지는 2차원 테이블을 만들어 UI를 구성하고,\n- 가능한 시간이면 즉, `schedules` 배열에 포함된 시간이면 true 그렇지 않으면 false로 채워진 `boolean[][]` 형태의 2차원 배열을 만들어서 상태로 관리\n\n하는 두 가지 작업을 수행했다. 그리고, 사용자가 가능한 시간을 수정하고 `등록하기` 버튼을 클릭하면 `boolean[][]` 2차원 배열을 다시 날짜와 시간 데이터를 포함하고 있는 `schedules` 와 같은 형태로 포매팅을 한 후 서버에 POST 요청을 보내주었다. 서버에서 가져올 때, 서버에 데이터를 전송할 때 모두 데이터를 포매팅하는 과정이 있어서 이 작업에 대한 오버헤드가 크다고 생각했었다… 자바스크립트의 `includes` 메서드를 사용해서 상태를 관리할 수 있었지만 매번 includes를 사용해서 배열을 순회하는 것과 데이터의 형태를 바꾸는 것의 오버헤드의 차이가 그렇게 크지는 않을 것이라고 생각했고, 남은 시간 동안 더 깔끔하고 좋은 방법을 떠올릴 수 없을 것 같아서 기존 방법을 유지하기로 했다.\n\n~~(더 좋은 방법에 대한 고민을 했을 때의 시간은 아마 오전 10시였을 것이다…)~~\n\n서버와의 연결을 확인한 후, 시연 순서를 기다렸고 우리 팀은 마지막 순서였다. 대부분의 팀이 시연자와 시연자를 도와주는 크루가 짝을 이뤄서 발표를 하러 나왔지만, 내가 우리 팀 이름 모모(모두 모여)니까 모두 나가자~ 라고 제안했고 흔쾌히 내 제안을 수락해줘서 모두가 나갔다…ㅋ\n\n어찌저찌 성공적으로 발표를 마무리 하고 램수면 상태로 집에 갔다. 팀 모모 고생했다!!! 👏🍀😊\n\n## 왜 해커톤을 한 것일까?\n\n모든 팀의 시연 발표가 마무리 된 후, 해커톤에 대해 회고하는 시간을 가졌다.\n\n> _왜 해커톤을 한 것일까요? 아무 이유 없이 했을까요?_\n\n회고 시간을 담당하셨던 코치께서 위와 같은 질문을 던지셨고, 우리는 다 같이 생각해보는 시간을 가졌다.\n\n![](./assets/my-answer.png)\n\n나는 위와 같이 대답했다. 24시간 이라는 제한된 시간 내에 우리가 구현해야 하는 핵심을 구현해야 하는 것은 말 그대로 정말 야생 그 자체였다. 해커톤의 요구사항도 미리 공개된 것이 아닌 해커톤 OT를 할 때 공개 되었고, 밤을 새지 않을 것이라 생각하고 아무런 준비도 하지 않고 캠퍼스에 출근한 결국 밤을 샜다.\n\n코치께서는 위와 같은 질문을 던지시면서 다음과 같은 말도 같이 해주셨다.\n\n> _지금까지 우테코에서 프로젝트를 진행했을 때, 핵심 가치와 벗어난 기능에 집중해서 시간과 체력을 많이 쓰는 것 같아 아쉬웠다. 예를 들어 로그인에 너무 힘을 쓰는 것.\n> 그래서 핵심은? 우리는 사용자에게 어떤 가치를? 이라는 질문에 대해서 24시간 동안 팀원들과 찐~하게 고민해보고 구현해보는 시간을 초반에 가지는 것이 좋다고 생각했다._\n\n확실히 제한된 시간 내에 핵심을 구현해야 한다는 요구사항이 있으니, 나와 우리 팀의 사고가 자연스럽게 **진짜 핵심**으로 동기화가 잘 된 것 같았다. 진짜 핵심을 정의하고 정의한 문제를 빠르게 해결하기 위해서 자연스럽게 팀원들과 정말 많은 대화를 나누고 소통한 것 같다. 우리 팀 전체가 정말 적극적이었던 24 시간이었다고 생각했다!\n\n그리고 또 이런 말씀도 해주셨다.\n\n> _일부러 우테코에서는 적절한 스트레스 상황을 만들고, 스스로의 자연스러운 진짜 모습을 팀원들에게 공개함으로써 팀원들과 빠르게 가까워지고 편해질 수 있도록 의도했다. 적절한 스트레스 상황이 없으면, 자연스럽게 가면을 쓰게 된다. 가면을 쓰는 동안 곪다가 레벨 4 마지막 쯤 터지게 되는 경우도 많이 봤다.\n> …\n> 실제 현업에서는 이런 일들이 당연히 생길 수 있다. 오늘은 이거 해야 했는데 당장 내일 갈아엎고 새로운 작업을 시작해야 할 수도 있다. 그런 상황에 적응하는 능력을 키우는 것도 중요하다._\n\n그렇다면 24 시간 동안 드러난 나의 진짜 모습 혹은 나도 몰랐던 새로운 모습이 있었을까?\n\n다른 팀원들은 어떻게 생각했을지 잘 모르겠지만, 딱히 다르거나 몰랐던 모습이 나오지는 않았던 것 같다. 평소에 시간에 대한 강박과 압박이 조금 있는 편이라, ‘제한 시간 내에 구현하지 못하면 어떡하지?’라는 생각을 중간중간 하긴 했지만, 뭔가 할 수 있을 것 같다는 느낌도 있었고, ‘못하면 뭐 어쩔 수 있나? 해커톤 끝나고 구현하면 되지~’라는 생각을 더 많이 한 것 같다. 그래서 평소처럼 노래 틀어 놓고, 중간중간 헛소리도 좀 하고, 다른 팀원들이랑 스몰 토크도 하면서 24시간을 보냈다.\n\n1차 스프린트를 준비했던 2주 동안의 팀 전체의 모습과, 해커에서의 팀 모습도 크게 다르진 않았던 것 같지만 확실히 평소보다 대화를 정말 많이 했고 소통이 더 잘 된다고도 느꼈다. (~~중간중간 텐션 스파이크 이슈로 멍을 때리긴 했지만…~~)\n\n## 우커톤(우테코 해커톤)은 나에게 어떤 의미가 있었나?\n\n해커톤이 끝나고 가장 많이 한 생각은 집에 가면서 말로도 뱉었지만, ‘이게 되네…’ 였다. 정말 핵심이라서 난이도가 높은데 24시간 안에 구현이 완료된 것을 보면서 ‘이게 진짜 24 시간내에 되는 것이었네…? ~~왜 되지…?’~~라고도 생각했다.\n\n진짜 왜 되었는지를 생각해보면, 코드 퀄리티에 대한 생각은 잠시 넣어두고 **일단 동작이라도 하도록 하는 것에 초점을 맞추었기 때문**이었다. 코드를 작성하는 중간중간 매직 넘버나, 별로인 것 같은 로직이나, 중복되는 로직 등등… 리팩터링을 하고 싶은 욕구가 정말 많았지만 그 때마다 팀원들끼리 나중에 생각해!를 외치며 일단 눈 앞에 제대로 동작이라도 하는 것에 집중했기 때문에 제한 시간 내에 가능한 것 같다. 만약, 코드 퀄리티나 기타 부수적인 것들에 집중하느라 시연을 할 때 아무것도 보여주지 못했다면 밤을 샜는데도 불구하고 구현을 하지 못했다는 생각에 오히려 더 지쳐 팀 전체의 사기도 떨어질 수 있었을 것 같다고 생각하기도 했다.\n\n해커톤이 끝나면 좋지 못한 코드들, 스스로 생각했을 때 만족하지 못한 코드들에 대해서 리팩터링을 진행해야 할 것이지만, 당장 핵심은 구현했기 때문에 해커톤이 끝나고 우리 팀의 분위기도 좋았다. **핵심을 계속해서 강조하는 이유를 이제는 진짜 알 것 같다.**\n\n![](./assets/mail.png)\n\n집에 가면서 우테코 최종 코딩 테스트 메일에 포함된 위 내용을 떠올렸다.\n\n> \\*한편으로는 소프트웨어가 제대로 작동하지 않는 경우 위의 모든 사항이 의미가 있을까요? **결국 우리가 프리코스에서 배운 것들은 소프트웨어가 제대로 작동할 때 의미가 있지 않을까요?\\***\n\n코드 퀄리티에 집중하는 것 보다, 당장 눈 앞에 주어진 문제를 해결하는 것에 집중하며 사용자에게 정말 작은 가치라도 전달할 수 있을 것 같은 가능성을 발견하는 것이 훨씬 중요하다. 우테코 생활을 하면서, ‘점진적으로 발전시켜 나간다’라는 문장이나 요구사항들을 많이 본 것 같은데 이 말이 무슨 의미인지도 해커톤이 끝나고 크게 와닿았다.\n\n**‘당장은 맘에 들지 않는 코드더라도 점진적으로 발전 시켜나가면 된다.’**\n\n**‘가장 작은 것 부터 시작해서 차근차근 쌓아가면 된다.’**\n\n와 같은 의미가 담긴 문장이 아니었을까 생각한다.\n\n또, 해커톤이 끝나고 내 모습을 너무 단정 짓지 말자고도 생각했다. 해커톤 공지가 올라왔을 때만 해도, ‘밤을 절대 새지 않을 것이다’ 라고 말했던 것도 ‘나는 밤을 새지 않는 사람이다’ 라고 단정짓는 것에 익숙했기 때문일 것이다. 스스로의 모습을 단정지으면서 살아도 갑작스러운 상황이 생기면 그 모습을 잠시 내려놓아야 하는데, 굳이 미리 단정지으면서 살아가기 보다는 그 갑작스러운 상황에 빠르게 적응하기 위해서 어떤 모습이 필요한지를 먼저 생각해 보자!\n\n해커톤 끗!\n"},{"excerpt":"🚨 아직 미완성... 🚨 0부터 시작해야 했던 프로젝트 세팅 1차 스프린트 (번외) 사혼의 구슬 스터디 : 나만의 디자인 시스템 만들어 보기 레벨 3을 대할 앞으로의 마음가짐","fields":{"slug":"woowacourse-level-3-1th-sprint-retrospect-2"},"frontmatter":{"date":"July 15, 2024","title":"우아한테크코스 레벨 3 1차 스프린트 회고 - 2","tags":["회고","우아한테크코스"]},"rawMarkdownBody":"\n🚨 아직 미완성... 🚨\n\n## 0부터 시작해야 했던 프로젝트 세팅\n\n## 1차 스프린트\n\n## (번외) 사혼의 구슬 스터디 : 나만의 디자인 시스템 만들어 보기\n\n## 레벨 3을 대할 앞으로의 마음가짐\n\n```js\nconst a = 10\n```\n"},{"excerpt":"🚨 아직 미완성... 🚨 레벨 2 방학 동안 많이 놀았어요 🤩 리액트를 학습하는 레벨 2 과정이 끝난 후, 2주 동안의 방학 동안 레벨 3을 위한 체력을 비축했다기 보다는 '레벨 3이 시작되면 다시 바빠질 텐데 언제 마음 편하게 놀 수 있을까?'라고 생각하며 정말 많이 놀았다. (노는 것도 체력이 굉장히 많이 필요하더라...) 방학 1주차에는 고향인 부산…","fields":{"slug":"woowacourse-level-3-1th-sprint-retrospect-1"},"frontmatter":{"date":"July 14, 2024","title":"우아한테크코스 레벨 3 1차 스프린트 회고 - 1","tags":["회고","우아한테크코스"]},"rawMarkdownBody":"\n🚨 아직 미완성... 🚨\n\n## 레벨 2 방학 동안 많이 놀았어요 🤩\n\n리액트를 학습하는 레벨 2 과정이 끝난 후, 2주 동안의 방학 동안 레벨 3을 위한 체력을 비축했다기 보다는 '레벨 3이 시작되면 다시 바빠질 텐데 언제 마음 편하게 놀 수 있을까?'라고 생각하며 정말 많이 놀았다. (~~노는 것도 체력이 굉장히 많이 필요하더라...~~)\n\n방학 1주차에는 고향인 부산에 내려가서 오랜만에 고향 친구들도 만나고, 부모님과 친척들도 보고, 몇몇 프론트엔드 크루들과 부산 이곳저곳을 다니며 힐링도 많이 했다! 2주차에는 다시 서울에 올라와서 내가 좋아하는 곳인 3호선 라인(경복궁, 서촌, 안국)들도 많이 다니고 4, 5기 선배님들의 프로젝트인 맛집 프로젝트 개선 작업에도 참여했다.\n\n<몇몇 사진 뽑아서 올리기>\n\n2주간의 방학을 보내고 레벨 3이 시작되었다!\n\n## 레벨 3 OT\n\n레벨 3 시작 첫 날에는 `슬기로운 레벨 3 생활`을 주제로 OT를 진행했다.\n\n![](<Screenshot 2024-07-14 at 23.05.29.png>)\n![](<Screenshot 2024-07-14 at 23.26.26.png>)\n\n우테코는 레벨 3 부터 팀 프로젝트를 시작한다. 레벨 5 까지 진행되는 우테코 전체 과정에서 레벨 3 부터 팀 활동을 시작하는게 이르다고 느껴질 수 있다. 이에 대해서 포비는 다음과 같이 말씀해 주셨다.\n\n> _팀 프로젝트를 레벨 3부터 시작하는 이유가 있다. 팀 프로젝트를 잘 하기 위해서는 시간이 꽤 오래 걸린다. 긴 시간 동안 찐~한 협업 경험을 했으면 좋겠는 마음에 레벨 3부터 팀 프로젝트를 시작하는 것으로 결정했다. 앞으로 남은 기간 동안 찐~한 협업 경험을 할 수 있는 의미있는 시간이 되었으면 한다._\n\n> _새로 만난 팀원들과 활동을 시작하면서 너무 내 모습을 숨기지 말고, 너무 다른 사람에게 맞춰주려고 하지 말고, 나의 진짜 모습 있는 그대로의 모습을 보여주려고 노력하면 더 많이 성장할 수 있을 것이다. 사회에 나가서 나의 진짜 모습을 찾으려고 하기 보다, 사회에 나가기 전 우테코에서 협업을 할 때 발견할 수 있는 자신의 진짜 모습을 반견할 수 있었으면 좋겠다._\n\n레벨 1이 끝난 후, 일주일의 방학 동안 `함께 자라기` 책을 읽으면서 책이 전달해주려고 하는 메시지에 어느 정도 공감했었고 **분업 보다는 협업**이 중요하다는 사실도 깨달았다. 그리고, **분업이 아닌 협업을 하는 개발자**가 되고 싶다는 생각도 했다.\n\n하지만, 단순히 분업이 아닌 협업을 하고 싶다는 생각만으로는 책에서 말하는 협업에 다가가기 힘들 것이고, 눈 앞에 어떤 현실을 마주하게 될지도 모르기 때문에 내가 진짜 협업을 할 수 있을까에 대한 의구심도 들었었다. 더군다나 지금까지 학습이나 프로젝트를 하면서 찐~한 협업 경험을 해본적은 없기 때문에, 추상적으로 느껴지는 찐~한 협업이라는 것을 내가 팀 프로젝트를 하는 레벨 3, 4 동안 할 수 있을지에 대한 막연함도 생겼다.\n\n포비께서 추가로 해주신 말씀을 듣고, 내가 과연 찐~한 협업을 할 수 있을지에 대한 의심에 대해서 너무 복잡하거나 깊게 생각하지 않기로 했다.\n\n> _실전은 아니니까 얼마든 실수해도 괜찮다._\n\n실수하는 것을 두려워 하기 보다는, 언제든 실수는 할 수 있는 것이라 생각하고 실수를 통해 하나라도 배울 점을 찾는 팀원이 되기를!\n\n![](<Screenshot 2024-07-14 at 23.12.30-1.png>)\n\n레벨 3, 4에서 우리의 모습은 현장 재직자의 모습과 굉장히 비슷할 것이라고도 말씀해 주셨다.\n\n> _근무 시간(팀 활동 시간)에는 지금까지 쌓아온 나의 역량을 발휘하고, 근무 시간이 아닐 때는 개인의 성장을 위한 학습을 하는 시간을 갖는 싸이클일 것이다. 근무 외 시간에 나의 개인적인 성장을 위한 준비를 해야한다. 시간 관리 연습도 해봤으면 한다._\n\n포비의 말씀을 듣고 시간 관리 연습을 해보고 싶다는 생각이 들어 매주 월요일 진행하는 유강스(유연성 강화 스터디)의 목표를 **개인의 성장을 위한 시간과, 팀의 성장을 위한 시간 ‘잘’ 구분하기**로 정했다! ([유강스 목표를 정하려다가 개인 회고를 하게 되었다.](https://hwinkr.github.io/2024-07-08/))\n\n그리고 팀 프로젝트를 진행하면서 의외로 문제가 많이 발생할 수 있는 영역에 대해서도 조언을 해주셨다.\n\n![역할과 책임이 명확하지 않은 영역들](<Screenshot 2024-07-14 at 23.42.42.png>)\n\n위 이미지에서도 확인할 수 있듯, 요구사항 분석, 화면 설계서 작성, 디자인, 개발, 테스트는 같은 문제를 해결해 가는 팀원 모두가 **해야 하는 일**임을 모두가 알고있다. 그래서 해당 일들을 진행하면서는 문제가 발생할 확률이 적다.\n\n> _하지만 애매한 영역 즉, '이게 우리에게 꼭 필요한 것일까?', '내가 아닌 누군가가 하지 않을까?'와 같은 생각이 드는 영역에서 의외로 문제가 많이 발생한다.  \n> 예를 들어 회고 & 피드백과 같은 팀의 문화를 만들어 가거나, 의견 전달과 조율을 더 잘 할 수 있도록 하는 소프트적인 영역을 챙긴다거나 하는 사소한 영역인 것 같으면서도 중요한 영역같아서 애매하다는 생각이 드는 영역들. 해당 영역들에서 오히려 문제가 더 많이 발생한다._\n\n포비의 말씀을 들으면서 이사를 하는 상황이 떠올랐다. 이사를 할 때 보증금/월세 같은 경우는 **지출해야 하는 영역**인 것을 알고 있기 때문에, 해당 돈을 내고 나면 쉽게 잊혀진다. 하지만, 빈 방을 채우기 위해서 다이소에서 물품들을 사거나 쿠팡으로 생활용품등을 주문하는 것들이 오히려 더 큰 지출로 느껴진다.\n\n필요없을 줄 알았는데 너무나 필요한 것들이여서 장바구니에 담다보면 큰 지출로 느껴지는 것 처럼, 애매한 영역이라 크게 신경쓰지 않아도 될 줄 알았는데 해당 영역에서 문제가 많이 발생하는...\n\n시간적인 여유가 된다면 애매한 영역을 챙겨서 팀의 분위기나 사기를 더 좋게 만드는 팀원이 되어보고 싶다 :D 팀 프로젝트의 주인이라는 마음가짐으로 임하며, 사소하다고 생각할 수 있는 영역도 챙기는 그런 팀원!\n\n![](<Screenshot 2024-07-14 at 23.59.18.png>)\n\n우테코는 많은 책임을 가지면서 이에 따라 많은 성장을 할 수 있는, 철저히 스타트업 분위기를 기대한다고도 말씀해 주셨다. 나와 너가 하는 일의 경계가 없이, 모든 일을 나의 일이다, 내가 사랑하는 일이다 라고 생각하면서 일하는 곳.\n\n![](<Screenshot 2024-07-15 at 00.01.48.png>)\n\n마지막으로 포비가 믿는 세상에 대해서 소개하며 OT의 시작을 마무리 하셨다.\n\n포비가 믿는 세상에 공감하고, 만들어 가려는 사람이 되려면 `심리적 여유`가 필요하다고 생각한다. 잠시 멈춰서 옳은 방향으로 가고 있는 것인지에 대해서 비판적 사고를 할 수 있는 시간적 여유, 서로의 고민이나 생각들에 대해서 공감하고 진심어린 피드백을 주고 받을 수 있는 팀에 속해있다는 심리적 여유 등등.\n\n우테코를 시작하기 전 지금까지의 내 모습을 돌아봤을 때, 경쟁과 속도와 결과를 우선시 했고 실패를 피하려고 했다. 그러다보니 스스로를 채찍질하면서 살아가는 것에 익숙했었으며, 나도 모르게 번아웃이 찾아와 번아웃의 굴레 속에서 허우적대기도 했다. 한 마디로 나에게 `심리적 여유`는 존재하지 않았었다.\n\n하지만, 우테코 활동을 시작한 후 코치들과의 면담, 함께 학습하는 크루들과의 스몰 토크, 유강스 등을 통해 긍정적인 영향을 많이 받았고 나의 일상과 개발이 '함께', '멀리' 갈 수 있는 방법에 대해서 어느 정도 알게되었고 실천도 했다. 다른 크루들에게도 많이 얘기를 하지만 우테코를 시작하고 나서 개발적으로 폭발적인 성장을 한 것인지는 잘 모르겠지만, 오히려 인간적인 성장을 많이 하고 있는 것 같다.  \n([레벨 1 글쓰기 미션](https://github.com/woowacourse/woowa-writing/pull/113), [레벨 2 글쓰기 미션](https://github.com/woowacourse/woowa-writing/pull/253)에서 확인할 수 있다! :D)  \n물론 이 방법들이 항상 적용된 것은 아니다. 당장 레벨 3 첫 주말에만 해도 모든 것을 다 잘하고 싶어 하며 결과를 우선시 하려는 과거의 모습들이 스멀스멀 올라와서 약간의 괴로움이 느껴졌다. 하지만, 우테코 시작 전과 달라진 점은 지금까지의 우테코 활동을 통해서 얻은 인사이트를 사용해서 빠르게 내 문제에 대해서 의식할 수 있게 되었다는 것과, 언제든 열린 자세로 나의 생각에 대해서 피드백을 해 줄 크루들이 있다는 것이다.\n\n현재 10개월 기간동안 진행되는 우테코 활동의 절반 정도가 흘렀고, 슬슬 취업 걱정도 되고 우테코 이후 삶에 대한 생각도 많이 하고 있다. 너무 많은 걱정, 고민, 생각보다는 지금까지의 활동을 통해서 배운 유연함을 활용해서 앞으로 남은 기간 동안 개발과 '함께', '멀리' 가고 싶다!\n\n## 우리 팀이 해결할 도메인\n\n## 팀 빌딩과 팀의 그라운드 룰\n"},{"excerpt":"우테코에서는 각 레벨마다 유연성 강화를 위한 목표를 세우고, 팀원들과 스터디들 한다. 이번 레벨 3에서는 아래에서 확인할 수 있듯 시간을 '유연하게', '잘' 구분한다는 목표를 세웠다. 해당 목표를 정하게 된 이유를 설명하다가 개인 회고도 하게 되었다...ㅋ 나의 유강스 목표 개인의 성장을 위한 시간과, 팀의 성장을 위한 시간 ‘잘’ 구분하기 왜 이 목표…","fields":{"slug":"level-3-flexibility-goal"},"frontmatter":{"date":"July 08, 2024","title":"유강스 목표를 정하려다가 개인 회고를 하게 되었다","tags":["회고"]},"rawMarkdownBody":"\n우테코에서는 각 레벨마다 유연성 강화를 위한 목표를 세우고, 팀원들과 스터디들 한다. 이번 레벨 3에서는 아래에서 확인할 수 있듯 시간을 '유연하게', '잘' 구분한다는 목표를 세웠다. 해당 목표를 정하게 된 이유를 설명하다가 개인 회고도 하게 되었다...ㅋ\n\n## 나의 유강스 목표\n\n---\n\n개인의 성장을 위한 시간과, 팀의 성장을 위한 시간 ‘잘’ 구분하기\n\n## 왜 이 목표를?\n\n---\n\n이유는 정말 간단하다. 구분할 수 있는 능력이 없을 경우, 어떤 상황이 벌어지는지 생각해보면 된다.\n\n만약, 개인과 팀의 시간을 구분하지 못한다면 나의 목표를 향해 개인적으로 해야 하는 일에 집중하지 못하니 나의 개인적인 목표를 향해 조금이라도 나아가고 있다고 전혀 느낄 수 없을 것이다. 반대로, 팀에 속한 팀원으로서 해야 하는 일에 집중하지 못하니 팀의 목표를 향해 나아가는데 차질이 생길 수 있고, 내가 걸림돌이 되고 있다는 생각을 하게 될 것이다.\n\n그래서 on/off는 정말 중요하다. 개인의 일에 집중해야 할 때는 팀에 대해서 잠시 잊고, 팀원으로서 집중해야 할 때는 개인에 대해서 잠시 잊는 것.\n\n내가 집중해야 하는 시간, 집중해야 하는 상황, 나와 함께 집중하고 있는 사람들을 파악하고 온전히 시간을 쏟는 것은 나와 나의 팀의 성장을 가속화할 수 있을 것이다. 반대로 쉬어야 할 때를 알고, 내가 해결해야하는 문제에 대해서 잠시 잊고 일상과 주변을 느끼는 것은 다음 on을 위해 체력을 비축하는 의미있는 시간이 될 것이다.\n\n문장으로 적는 것은 정말 쉽지만, 어떻게 실천해야할지는 감이 잡히지 않는다.\n\n집중해야 하는 시간과 잠시 쉬어도 되는 시간도 잘 구분하지 못해서 맥북을 덮어도 해결하지 못한 문제들을 계속 떠올리는 내가(개인에 대한 on/off도 잘 하지 못하는 내가), 개인의 시간과 팀의 시간까지 구분해낼 수 있을까? on/off를 잘 구분하지 못하고, 계속해서 off인 척 on으로 살아가는 내 모습도 나의 일부이기 때문에 받아들이며 살 수 있겠지만서도 가끔 완전히 off일 때 느낄 수 있는 심리적 편안함의 소중함을 잘 알기 때문에 의식적으로 ‘진짜 off 모드’ 연습을 해야겠다는 필요성을 느낀다.\n\n지금까지 내가 off인 척 계속 on 모드로 살아갔던 것은 아마도 **욕심이 너무 컸기 때문일 것이다.**\n\n> 잘하고 싶어, 다 알고 싶어!\n\n(이것도 알고 싶고, 저것도 알고 싶고, 내 앞에 놓인 모든 것을 잘하고 싶은 마음.)\n\n바로 어제(07/07)도\n\n- 디자인 시스템을 만들고 싶어서 디자인 공부도 해보려다가 (~~디자인 토큰 개념도 잘 모름.~~)\n- 스타일링 라이브러리를 뭐 쓸지 비교해보려다가\n- 우리 팀(우테코 레벨 3)의 서비스와 유사한 서비스의 흐름과 장단점을 비교 분석해보려다가\n- 웹팩에 대해서 알아보려다가\n\n결국 내가 해야 하는 일에 압도되어 뭐 하나 제대로 했다고 할 수 없는 하루를 보냈다. 개인에게 필요한 학습과 팀에서 필요한 학습을 구분하지 못하고 모든 것을 잘 하려고 하는 마음에서 비롯된 하루를 보냈다.\n\n문제를 발견했으니 차근차근 해결해보자.\n\n‘잘 한다’는 단어 자체가 굉장히 추상적이고, 저마다의 기준도 다르니 나만의 기준을 세우는 것.  \n너무 ‘잘 하려’고 하지 말고 하나를 하더라도, 그 경험을 통해서 ‘자라려’고 하는 것\n\non/off를 잘하기 위해서는 결국 스스로에 대해서 잘 알아야 한다고 생각한다.\n\n- 내가 ‘현재’, ‘지금’ 시간에 잘 집중하고 있다면 어떤 모습이 나오는지?\n  - 반대로, 잘 집중하지 못한다면 어떤 모습이 나오는지?\n- 일주일 중 몇 시간 정도 심리적 편안함을 느끼면, 체력을 비축할 수 있는지?\n  - 무엇을 하며 편안함을 느낄 것인지? 뭘 좋아하는지?\n- on모드에서 해야 할 일을 다 끝내지 못했을 때는 어떻게 하면 좋을지?\n\n등등 여러 상황 속에서 내 모습을 잘 알아야하며 그래야만 내가 더 오래, 즐겁게 성장할 수 있을 것이다.\n\n올해만 개발하고 내년에는 다른 일을 할 것인가? 아니지 않나?  \n조금 느리더라도 개발과 내가 ‘멀리’, ‘같이’ 갈 수 있기를!\n"},{"excerpt":"👋🏻 반갑습니다 :) 기록 시작합니다.","fields":{"slug":"hello"},"frontmatter":{"date":"July 07, 2024","title":"Hello","tags":["회고"]},"rawMarkdownBody":"\n## 👋🏻\n\n반갑습니다 :)\n\n기록 시작합니다.\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}